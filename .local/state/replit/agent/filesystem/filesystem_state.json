{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a RIASEC (Holland Code) career assessment and major recommendation system specifically designed for Korean university students. The application helps students discover their personality types and provides personalized recommendations for academic majors within a Creative Convergence Department. The system combines personality assessment, AI-powered career guidance, Pinecone vector database for similar case studies, Rasa-like conversation management, and an interactive chat interface to provide comprehensive academic counseling.\n\n## Recent Changes (January 2025)\n- **Added User Authentication System**: Student ID-based registration (9-digit validation) with secure login/logout\n- **Added Satisfaction Survey System**: Comprehensive feedback collection integrated with Pinecone for case studies\n- **Enhanced Database Architecture**: PostgreSQL with users, satisfaction_surveys tables and proper foreign key relationships\n- **Added Pinecone Vector Database Integration**: Implemented vector storage and similarity search for case studies\n- **Added Rasa-like Conversation Management**: Enhanced chat with intent classification and entity extraction  \n- **Enhanced Assessment Results**: Now includes feedback from similar cases based on user's RIASEC profile\n- **Improved Chat Intelligence**: Structured conversation flow with slot management and action determination\n- **Corrected Institutional Information**: Clarified that 컴퓨터융합학부 is the renamed 컴퓨터공학과 under 공과대학, separate from 창의융합대학\n- **Implemented GPT-based Data Integrity Validation**: Added comprehensive AI-powered validation system for RIASEC assessments, satisfaction surveys, and user data with real-time feedback to users\n- **Enhanced Natural Chat Experience**: Upgraded chat system with context-aware conversations, personality-based responses, and human-like counseling approach for better user engagement\n- **Implemented Chat Security and Conversation Enhancement**: Added rate limiting, content filtering, and conversation depth analysis to prevent abuse while encouraging rich discussions\n- **Removed Guest Experience and Bookmark Features**: Streamlined user experience by removing guest trial functionality and bookmark system\n- **Enhanced Profile Satisfaction Survey Access**: Added prominent satisfaction survey button in user profile for better accessibility  \n- **Fixed RIASEC Assessment Navigation Bug**: Corrected issue where assessment page wouldn't proceed after initial selection\n- **Minimized Data Validation**: Replaced GPT-based validation with basic range checks for faster processing\n- **Improved RIASEC Chart Visualization**: Enlarged chart from h-80 to h-96 for better readability\n- **Fixed Dialog Accessibility Issues**: Added proper DialogTitle and DialogDescription for screen reader compatibility\n- **Enhanced RIASEC Score UX**: Removed default 0 values, added flexible max score input (default 100), automatic score standardization\n- **Significantly Enlarged Chart Display**: Increased chart size to h-[800px] with full-width layout for maximum score visualization\n- **Enhanced Chart Visual Elements**: Enlarged point radius (8px), labels (16px), and border width (3px) for better clarity\n- **Added Dynamic Analysis Loading**: Implemented step-by-step loading animation with progress indicators during AI analysis\n- **Improved Chat Intelligence**: Enhanced natural chat service to interpret most questions as major recommendation requests, making the chatbot more helpful and focused on academic counseling\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite for development and building\n- **Routing**: wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Design System**: Custom Korean-focused design with neutral color palette and accessible components\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints for assessment, chat, and recommendation services\n- **Development**: Hot module replacement with Vite integration for seamless development experience\n\n## Data Storage Solutions\n- **ORM**: Drizzle ORM for type-safe database operations with foreign key relationships\n- **Database**: PostgreSQL with Neon serverless hosting for production scalability\n- **Schema**: Comprehensive tables for users (with student ID), assessments, chat sessions, and satisfaction surveys\n- **Data Integrity**: Proper foreign key constraints and user-scoped data access patterns\n\n## Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store and bcrypt password hashing\n- **User Registration**: Student ID-based system with 9-digit validation (YYYY + 5-digit sequence)\n- **Secure Authentication**: Username/password login with session persistence and user isolation\n- **Data Isolation**: User-scoped data access patterns with proper foreign key relationships\n\n## External Dependencies\n\n### AI and Machine Learning\n- **OpenAI GPT-4o**: Powers RIASEC personality analysis and major recommendations\n- **Assessment Engine**: Custom logic for analyzing user responses and calculating personality scores\n- **Chat Intelligence**: Context-aware conversational AI for academic counseling\n- **Pinecone Vector Database**: Stores and retrieves similar case studies for enhanced recommendations\n- **Rasa-like Conversation Management**: Intent classification, entity extraction, and conversation flow management\n\n### Database and Storage\n- **Neon Database**: Serverless PostgreSQL hosting with automatic scaling\n- **Drizzle Kit**: Database migration and schema management tools\n- **Session Storage**: Persistent session management with PostgreSQL backend\n\n### UI and Design System\n- **Radix UI**: Comprehensive set of accessible, unstyled UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide Icons**: Consistent icon system throughout the application\n- **shadcn/ui**: Pre-built component library with customizable styling\n\n### Development and Build Tools\n- **Vite**: Fast development server and optimized production builds\n- **ESBuild**: High-performance JavaScript bundling for server-side code\n- **TypeScript**: Type safety across frontend, backend, and shared schemas\n- **Replit Integration**: Development environment optimizations and error handling\n\n### Form and Data Handling\n- **React Hook Form**: Efficient form state management with validation\n- **Zod**: Runtime type validation and schema definition\n- **date-fns**: Date manipulation and formatting utilities\n- **Embla Carousel**: Touch-friendly carousel components for assessment flow\n\nThe system emphasizes user experience with a mobile-responsive design, real-time chat capabilities, and personalized assessment results that help Korean students make informed decisions about their academic future.","size_bytes":7169},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/pinecone.ts":{"content":"import { Pinecone } from '@pinecone-database/pinecone';\nimport OpenAI from 'openai';\nimport type { RIASECScores } from '@shared/schema';\n\nconst pinecone = new Pinecone({\n  apiKey: process.env.PINECONE_API_KEY || ''\n});\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || ''\n});\n\nconst INDEX_NAME = 'riasec-cases';\nconst DIMENSION = 1536; // OpenAI text-embedding-ada-002 dimension\n\nexport interface CaseStudy {\n  id: string;\n  riasecScores: RIASECScores;\n  selectedMajor: string;\n  satisfactionRating: number;\n  description: string;\n  graduationYear?: number;\n  careerPath?: string;\n}\n\nexport class PineconeService {\n  private index: any;\n  \n  async initialize() {\n    try {\n      // Check if index exists, create if not\n      const existingIndexes = await pinecone.listIndexes();\n      const indexExists = existingIndexes.indexes?.some(index => index.name === INDEX_NAME);\n      \n      if (!indexExists) {\n        console.log(`Creating Pinecone index: ${INDEX_NAME}`);\n        await pinecone.createIndex({\n          name: INDEX_NAME,\n          dimension: DIMENSION,\n          metric: 'cosine',\n          spec: {\n            serverless: {\n              cloud: 'aws',\n              region: 'us-east-1'\n            }\n          }\n        });\n        \n        // Wait for index to be ready\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      }\n      \n      this.index = pinecone.index(INDEX_NAME);\n      console.log('Pinecone service initialized successfully');\n      \n      // Initialize with sample data if empty\n      await this.seedSampleData();\n      \n    } catch (error) {\n      console.error('Failed to initialize Pinecone:', error);\n      throw error;\n    }\n  }\n\n  async generateEmbedding(text: string): Promise<number[]> {\n    try {\n      const response = await openai.embeddings.create({\n        model: 'text-embedding-ada-002',\n        input: text,\n      });\n      \n      return response.data[0].embedding;\n    } catch (error) {\n      console.error('Failed to generate embedding:', error);\n      throw error;\n    }\n  }\n\n  async storeCaseStudy(caseStudy: CaseStudy): Promise<void> {\n    try {\n      // Create text representation for embedding\n      const textData = `\n        RIASEC 점수: 실용적 ${caseStudy.riasecScores.realistic}, 탐구적 ${caseStudy.riasecScores.investigative}, \n        예술적 ${caseStudy.riasecScores.artistic}, 사회적 ${caseStudy.riasecScores.social}, \n        진취적 ${caseStudy.riasecScores.enterprising}, 관습적 ${caseStudy.riasecScores.conventional}\n        선택 전공: ${caseStudy.selectedMajor}\n        만족도: ${caseStudy.satisfactionRating}\n        설명: ${caseStudy.description}\n      `;\n\n      const embedding = await this.generateEmbedding(textData);\n\n      await this.index.upsert([{\n        id: caseStudy.id,\n        values: embedding,\n        metadata: {\n          realistic: caseStudy.riasecScores.realistic,\n          investigative: caseStudy.riasecScores.investigative,\n          artistic: caseStudy.riasecScores.artistic,\n          social: caseStudy.riasecScores.social,\n          enterprising: caseStudy.riasecScores.enterprising,\n          conventional: caseStudy.riasecScores.conventional,\n          selectedMajor: caseStudy.selectedMajor,\n          satisfactionRating: caseStudy.satisfactionRating,\n          description: caseStudy.description,\n          graduationYear: caseStudy.graduationYear || 0,\n          careerPath: caseStudy.careerPath || \"미정\"\n        }\n      }]);\n\n      console.log(`Stored case study: ${caseStudy.id}`);\n    } catch (error) {\n      console.error('Failed to store case study:', error);\n      throw error;\n    }\n  }\n\n  async findSimilarCases(riasecScores: RIASECScores, topK: number = 5): Promise<CaseStudy[]> {\n    try {\n      // Create query text\n      const queryText = `\n        RIASEC 점수: 실용적 ${riasecScores.realistic}, 탐구적 ${riasecScores.investigative}, \n        예술적 ${riasecScores.artistic}, 사회적 ${riasecScores.social}, \n        진취적 ${riasecScores.enterprising}, 관습적 ${riasecScores.conventional}\n      `;\n\n      const queryEmbedding = await this.generateEmbedding(queryText);\n\n      const queryResponse = await this.index.query({\n        vector: queryEmbedding,\n        topK,\n        includeMetadata: true,\n        includeValues: false\n      });\n\n      const similarCases: CaseStudy[] = queryResponse.matches?.map((match: any) => ({\n        id: match.id,\n        riasecScores: {\n          realistic: match.metadata.realistic,\n          investigative: match.metadata.investigative,\n          artistic: match.metadata.artistic,\n          social: match.metadata.social,\n          enterprising: match.metadata.enterprising,\n          conventional: match.metadata.conventional\n        },\n        selectedMajor: match.metadata.selectedMajor,\n        satisfactionRating: match.metadata.satisfactionRating,\n        description: match.metadata.description,\n        graduationYear: match.metadata.graduationYear || undefined,\n        careerPath: match.metadata.careerPath !== \"미정\" ? match.metadata.careerPath : undefined,\n        similarity: match.score\n      })) || [];\n\n      return similarCases;\n    } catch (error) {\n      console.error('Failed to find similar cases:', error);\n      return [];\n    }\n  }\n\n  async generateFeedbackFromSimilarCases(\n    userRiasec: RIASECScores, \n    recommendedMajors: string[]\n  ): Promise<string> {\n    try {\n      const similarCases = await this.findSimilarCases(userRiasec, 3);\n      \n      if (similarCases.length === 0) {\n        return \"아직 유사한 사례가 충분하지 않지만, 추천된 전공들이 당신의 성향에 잘 맞을 것으로 예상됩니다.\";\n      }\n\n      const casesText = similarCases.map((case_, index) => \n        `사례 ${index + 1}: ${case_.selectedMajor} 선택, 만족도 ${case_.satisfactionRating}/5점\n        성향: R:${case_.riasecScores.realistic.toFixed(2)} I:${case_.riasecScores.investigative.toFixed(2)} \n              A:${case_.riasecScores.artistic.toFixed(2)} S:${case_.riasecScores.social.toFixed(2)} \n              E:${case_.riasecScores.enterprising.toFixed(2)} C:${case_.riasecScores.conventional.toFixed(2)}\n        후기: ${case_.description}\n        ${case_.careerPath ? `진로: ${case_.careerPath}` : ''}`\n      ).join('\\n\\n');\n\n      const prompt = `\n당신은 전공 상담 전문가입니다. 다음 정보를 바탕으로 피드백을 작성해주세요:\n\n사용자 RIASEC 성향:\nR: ${userRiasec.realistic.toFixed(2)}, I: ${userRiasec.investigative.toFixed(2)}, A: ${userRiasec.artistic.toFixed(2)}\nS: ${userRiasec.social.toFixed(2)}, E: ${userRiasec.enterprising.toFixed(2)}, C: ${userRiasec.conventional.toFixed(2)}\n\n추천 전공: ${recommendedMajors.join(', ')}\n\n유사한 성향의 선배들 사례:\n${casesText}\n\n이 사례들을 참고하여 사용자에게 도움이 되는 조언을 3-4문장으로 작성해주세요. \n구체적인 만족도나 경험담을 언급하며 격려하는 톤으로 작성해주세요.\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.7,\n        max_tokens: 300\n      });\n\n      return response.choices[0].message.content || \"유사한 사례를 바탕으로 좋은 선택이 될 것으로 예상됩니다.\";\n\n    } catch (error) {\n      console.error('Failed to generate feedback from similar cases:', error);\n      return \"사례 기반 피드백을 생성하는 중 오류가 발생했습니다.\";\n    }\n  }\n\n  private async seedSampleData(): Promise<void> {\n    try {\n      // Check if data already exists\n      const stats = await this.index.describeIndexStats();\n      if (stats.totalVectorCount && stats.totalVectorCount > 0) {\n        console.log(`Index already has ${stats.totalVectorCount} vectors`);\n        return;\n      }\n\n      console.log('Seeding sample case studies...');\n      \n      const sampleCases: CaseStudy[] = [\n        {\n          id: 'case-001',\n          riasecScores: { realistic: 0.8, investigative: 0.9, artistic: 0.3, social: 0.4, enterprising: 0.2, conventional: 0.6 },\n          selectedMajor: '컴퓨터공학과',\n          satisfactionRating: 5,\n          description: '논리적 사고와 문제해결을 좋아해서 컴퓨터공학과를 선택했습니다. 알고리즘 공부가 정말 재미있고, 프로젝트를 통해 실제 문제를 해결할 때 큰 보람을 느낍니다.',\n          graduationYear: 2023,\n          careerPath: '소프트웨어 엔지니어'\n        },\n        {\n          id: 'case-002',\n          riasecScores: { realistic: 0.4, investigative: 0.7, artistic: 0.8, social: 0.6, enterprising: 0.7, conventional: 0.3 },\n          selectedMajor: '디지털미디어학과',\n          satisfactionRating: 4,\n          description: '창의적인 작업과 기술적 구현을 모두 할 수 있어서 선택했습니다. 게임 디자인과 영상 제작 프로젝트가 특히 만족스럽습니다.',\n          graduationYear: 2022,\n          careerPath: 'UX/UI 디자이너'\n        },\n        {\n          id: 'case-003',\n          riasecScores: { realistic: 0.3, investigative: 0.8, artistic: 0.2, social: 0.3, enterprising: 0.4, conventional: 0.9 },\n          selectedMajor: '정보통계학과',\n          satisfactionRating: 5,\n          description: '데이터 분석과 통계적 사고를 통해 패턴을 찾는 것이 흥미롭습니다. 체계적인 접근법으로 문제를 해결하는 과정이 매우 만족스럽습니다.',\n          graduationYear: 2023,\n          careerPath: '데이터 사이언티스트'\n        },\n        {\n          id: 'case-004',\n          riasecScores: { realistic: 0.6, investigative: 0.5, artistic: 0.9, social: 0.4, enterprising: 0.6, conventional: 0.2 },\n          selectedMajor: '건축학과',\n          satisfactionRating: 4,\n          description: '공간을 디자인하고 실제로 구현하는 과정이 매력적입니다. 창의성과 실용성을 모두 고려해야 하는 점이 도전적이면서도 재미있습니다.',\n          graduationYear: 2021,\n          careerPath: '건축 설계사'\n        },\n        {\n          id: 'case-005',\n          riasecScores: { realistic: 0.4, investigative: 0.7, artistic: 0.3, social: 0.8, enterprising: 0.8, conventional: 0.5 },\n          selectedMajor: '도시계획학과',\n          satisfactionRating: 4,\n          description: '사람들의 삶을 개선하는 도시 환경을 만드는 일이 보람됩니다. 다양한 이해관계자와 소통하며 지속가능한 도시를 계획하는 과정이 의미있습니다.',\n          graduationYear: 2022,\n          careerPath: '도시계획 컨설턴트'\n        },\n        {\n          id: 'case-006',\n          riasecScores: { realistic: 0.7, investigative: 0.8, artistic: 0.2, social: 0.6, enterprising: 0.3, conventional: 0.7 },\n          selectedMajor: '환경공학과',\n          satisfactionRating: 5,\n          description: '환경 문제 해결에 기여할 수 있다는 점이 큰 동기가 됩니다. 실험과 현장 조사를 통해 실질적인 해결책을 찾는 과정이 흥미롭습니다.',\n          graduationYear: 2023,\n          careerPath: '환경 컨설턴트'\n        },\n        {\n          id: 'case-007',\n          riasecScores: { realistic: 0.5, investigative: 0.6, artistic: 0.7, social: 0.4, enterprising: 0.8, conventional: 0.4 },\n          selectedMajor: '소프트웨어학과',\n          satisfactionRating: 4,\n          description: '앱과 웹 서비스를 직접 만들어볼 수 있어서 좋습니다. 사용자 경험을 고려한 소프트웨어 개발이 특히 재미있고, 창업에도 관심이 생겼습니다.',\n          graduationYear: 2022,\n          careerPath: '스타트업 개발자'\n        },\n        {\n          id: 'case-008',\n          riasecScores: { realistic: 0.6, investigative: 0.7, artistic: 0.3, social: 0.5, enterprising: 0.9, conventional: 0.8 },\n          selectedMajor: '산업공학과',\n          satisfactionRating: 5,\n          description: '시스템을 최적화하고 효율성을 개선하는 과정이 매우 흥미롭습니다. 경영과 공학을 모두 배울 수 있어서 진로 선택의 폭이 넓어졌습니다.',\n          graduationYear: 2021,\n          careerPath: '프로젝트 매니저'\n        }\n      ];\n\n      // Store all sample cases\n      for (const caseStudy of sampleCases) {\n        await this.storeCaseStudy(caseStudy);\n      }\n\n      console.log(`Seeded ${sampleCases.length} sample case studies`);\n    } catch (error) {\n      console.error('Failed to seed sample data:', error);\n    }\n  }\n}\n\nexport const pineconeService = new PineconeService();","size_bytes":12747},"server/rasa.ts":{"content":"import axios from 'axios';\nimport type { RIASECScores, ChatMessage } from '@shared/schema';\nimport { pineconeService } from './pinecone';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || ''\n});\n\n// Rasa-like slot management and conversation flow\nexport interface ConversationSlots {\n  riasecScores?: RIASECScores;\n  recommendedMajors?: string[];\n  currentIntent?: string;\n  majorInterest?: string;\n  careerGoals?: string;\n  userInfo?: {\n    year?: number;\n    interests?: string[];\n    concerns?: string[];\n  };\n}\n\nexport interface ConversationState {\n  sessionId: string;\n  slots: ConversationSlots;\n  conversationStage: 'greeting' | 'assessment_done' | 'exploring_majors' | 'deep_counseling' | 'conclusion';\n  messageHistory: ChatMessage[];\n}\n\nexport class RasaLikeService {\n  private conversations: Map<string, ConversationState> = new Map();\n\n  // Intent classification using OpenAI\n  async classifyIntent(message: string, context?: ConversationSlots): Promise<string> {\n    try {\n      const prompt = `\n다음 사용자 메시지의 의도를 분류해주세요:\n\n메시지: \"${message}\"\n\n가능한 의도들:\n- greeting: 인사, 시작\n- ask_major_info: 특정 전공에 대한 정보 문의\n- ask_career_path: 진로, 취업 관련 질문\n- ask_curriculum: 커리큘럼, 수업 내용 문의\n- ask_admission: 입학, 전형 관련 질문\n- express_concern: 걱정, 우려 표현\n- ask_comparison: 전공 간 비교 요청\n- ask_recommendation: 추가 추천 요청\n- general_question: 일반적인 질문\n- goodbye: 대화 종료\n\n의도를 하나의 단어로만 답변해주세요.\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.1,\n        max_tokens: 50\n      });\n\n      const intent = response.choices[0].message.content?.trim().toLowerCase() || 'general_question';\n      return intent;\n    } catch (error) {\n      console.error('Intent classification error:', error);\n      return 'general_question';\n    }\n  }\n\n  // Entity extraction using OpenAI\n  async extractEntities(message: string): Promise<Record<string, any>> {\n    try {\n      const prompt = `\n다음 사용자 메시지에서 엔티티를 추출해주세요:\n\n메시지: \"${message}\"\n\n추출할 엔티티들:\n- major: 전공명 (예: 컴퓨터공학과, 소프트웨어학과 등)\n- career: 직업명 (예: 개발자, 디자이너 등)\n- year: 학년 또는 연도\n- interest: 관심사\n- concern: 걱정거리\n\nJSON 형식으로 답변해주세요. 해당하는 엔티티가 없으면 빈 객체를 반환해주세요.\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n        temperature: 0.1,\n        max_tokens: 200\n      });\n\n      const entities = JSON.parse(response.choices[0].message.content || '{}');\n      return entities;\n    } catch (error) {\n      console.error('Entity extraction error:', error);\n      return {};\n    }\n  }\n\n  // Update conversation slots\n  updateSlots(sessionId: string, newSlots: Partial<ConversationSlots>): void {\n    const conversation = this.conversations.get(sessionId);\n    if (conversation) {\n      conversation.slots = { ...conversation.slots, ...newSlots };\n    }\n  }\n\n  // Determine next action based on intent and slots\n  async determineNextAction(\n    sessionId: string,\n    intent: string,\n    entities: Record<string, any>,\n    message: string\n  ): Promise<string> {\n    const conversation = this.conversations.get(sessionId);\n    if (!conversation) return 'default_response';\n\n    // Update slots with extracted entities\n    if (entities.major) {\n      this.updateSlots(sessionId, { majorInterest: entities.major });\n    }\n    if (entities.career) {\n      this.updateSlots(sessionId, { careerGoals: entities.career });\n    }\n\n    // Action determination logic\n    switch (intent) {\n      case 'greeting':\n        return 'action_greet';\n      \n      case 'ask_major_info':\n        if (entities.major) {\n          return 'action_provide_major_info';\n        }\n        return 'action_ask_which_major';\n      \n      case 'ask_career_path':\n        return 'action_provide_career_info';\n      \n      case 'ask_curriculum':\n        return 'action_provide_curriculum_info';\n      \n      case 'ask_comparison':\n        return 'action_compare_majors';\n      \n      case 'ask_recommendation':\n        if (conversation.slots.riasecScores) {\n          return 'action_provide_similar_cases';\n        }\n        return 'action_suggest_assessment';\n      \n      case 'express_concern':\n        return 'action_address_concern';\n      \n      default:\n        return 'action_general_response';\n    }\n  }\n\n  // Execute actions\n  async executeAction(\n    sessionId: string,\n    action: string,\n    message: string,\n    entities: Record<string, any>\n  ): Promise<string> {\n    const conversation = this.conversations.get(sessionId);\n    if (!conversation) return '죄송합니다. 대화를 찾을 수 없습니다.';\n\n    switch (action) {\n      case 'action_greet':\n        return this.actionGreet(conversation);\n      \n      case 'action_provide_major_info':\n        return this.actionProvideMajorInfo(conversation, entities.major);\n      \n      case 'action_provide_career_info':\n        return this.actionProvideCareerInfo(conversation);\n      \n      case 'action_provide_curriculum_info':\n        return this.actionProvideCurriculumInfo(conversation, entities.major);\n      \n      case 'action_compare_majors':\n        return this.actionCompareMajors(conversation);\n      \n      case 'action_provide_similar_cases':\n        return this.actionProvideSimilarCases(conversation);\n      \n      case 'action_address_concern':\n        return this.actionAddressConcern(conversation, message);\n      \n      case 'action_ask_which_major':\n        return '어떤 전공에 대해 더 자세히 알고 싶으신가요? 컴퓨터공학과, 소프트웨어학과, 디지털미디어학과 등 구체적인 전공명을 말씀해주세요.';\n      \n      case 'action_suggest_assessment':\n        return '더 정확한 추천을 위해 먼저 RIASEC 성향 진단을 받아보시는 것을 추천합니다. 진단 페이지에서 간단한 테스트를 통해 당신의 성향을 파악할 수 있습니다.';\n      \n      default:\n        return this.actionGeneralResponse(conversation, message);\n    }\n  }\n\n  // Action implementations\n  private actionGreet(conversation: ConversationState): string {\n    if (conversation.slots.riasecScores) {\n      return `안녕하세요! 다시 만나서 반갑습니다. RIASEC 진단 결과를 바탕으로 충남대학교 전공에 대한 더 구체적인 상담을 도와드릴게요. 어떤 것이 궁금하신가요?`;\n    }\n    return `안녕하세요! 충남대학교 전공 상담 AI입니다. 저는 RIASEC 성향 분석을 바탕으로 충남대 맞춤형 전공 상담을 제공합니다. 창의융합대학과 기존 학과들에 대해 모두 상담 가능합니다. 어떻게 도와드릴까요?`;\n  }\n\n  private async actionProvideMajorInfo(conversation: ConversationState, majorName?: string): Promise<string> {\n    const major = majorName || conversation.slots.majorInterest;\n    if (!major) {\n      return '어떤 전공에 대해 알고 싶으신지 구체적으로 말씀해주세요.';\n    }\n\n    const majorInfo: Record<string, any> = {\n      '컴퓨터융합학부': {\n        description: '공과대학 소속, 기존 컴퓨터공학과에서 명칭 변경. AI, 빅데이터, SW, 정보보호 핵심 기술 교육을 통한 SW 우수 인재 양성.',\n        careers: ['AI 엔지니어', '소프트웨어 개발자', '데이터 사이언티스트', '정보보호 전문가', 'IoT 개발자'],\n        curriculum: ['인공지능', '데이터과학', '소프트웨어', 'IoT 임베디드시스템', '정보보호'],\n        companies: '삼성전자, LG전자, 네이버, SK텔레콤, KT 등',\n        admission: '공과대학 컴퓨터융합학부로 직접 입학'\n      },\n      '창의융합대학': {\n        description: '2025년 신설된 독립 단과대학. 전공자율선택제로 1학년 전공 탐색 후 2학년 진학시 64개 전공 중 선택.',\n        careers: ['융합 전문가', '창의적 문제해결자', '다학제 연구원', '혁신 기업가'],\n        curriculum: ['자율전공융합학부', '인문사회융합학부', '공학융합학부', '자연과학융합학부', '첨단융합학부', '농생명융합학부'],\n        features: '뉴비(New飛) 프로그램, 전공박람회 등 전공 탐색 지원',\n        admission: '무전공으로 입학, 1년 탐색 후 전공 선택'\n      },\n      '감성인지소프트웨어': {\n        description: 'SW 융합연계전공으로 심리학과 컴퓨터공학의 융합 교육을 통해 감성을 인지하는 소프트웨어 전문가를 양성합니다.',\n        careers: ['감성 AI 개발자', 'UX 연구원', '인간-컴퓨터 상호작용 전문가', '감성 데이터 분석가'],\n        curriculum: ['심리학', '컴퓨터공학', '웹 프로그래밍', '알고리즘', '융합 프로젝트']\n      }\n    };\n\n    const info = majorInfo[major];\n    if (!info) {\n      return `${major}에 대한 상세 정보를 준비 중입니다. 다른 전공에 대해 문의해주세요.`;\n    }\n\n    return `**${major}** 정보를 알려드릴게요!\n\n📖 **전공 소개**: ${info.description}\n\n💼 **주요 진로**: ${info.careers.join(', ')}\n\n📚 **핵심 교과목**: ${info.curriculum.join(', ')}\n\n${info.admission ? `🎓 **입학 방식**: ${info.admission}` : ''}\n\n더 궁금한 점이 있으시면 언제든 물어보세요!`;\n  }\n\n  private async actionProvideCareerInfo(conversation: ConversationState): Promise<string> {\n    const { riasecScores, recommendedMajors } = conversation.slots;\n    \n    if (!riasecScores || !recommendedMajors) {\n      return `충남대학교 진로 정보를 제공하기 위해 먼저 성향 진단을 받아보시는 것을 추천합니다. 당신의 RIASEC 성향에 맞는 구체적인 진로 정보를 제공해드릴 수 있습니다.`;\n    }\n\n    const careerMapping: Record<string, any> = {\n      '컴퓨터융합학부': {\n        careers: ['AI 엔지니어', '소프트웨어 개발자', '데이터 사이언티스트', '정보보호 전문가'],\n        companies: ['삼성전자', 'LG전자', '네이버', 'SK텔레콤', 'KT'],\n        salary: '신입 연봉 4000-5500만원'\n      },\n      '창의융합대학': {\n        careers: ['융합 전문가', '창의적 문제해결자', '혁신 기업가'],\n        features: ['64개 전공 선택', '전공자율선택제'],\n        advantage: '전공 경계를 넘나드는 창의융합 인재'\n      }\n    };\n\n    let careerInfo = '**충남대학교 추천 전공별 진로**\\n\\n';\n    recommendedMajors.forEach(major => {\n      const info = careerMapping[major];\n      if (info) {\n        careerInfo += `🎯 **${major}**: ${info.careers?.join(', ') || '전문가'}\\n`;\n        if (info.companies) {\n          careerInfo += `   주요 기업: ${info.companies.join(', ')}\\n`;\n        }\n        if (info.salary) {\n          careerInfo += `   예상 연봉: ${info.salary}\\n`;\n        }\n        careerInfo += '\\n';\n      }\n    });\n\n    careerInfo += '충남대학교는 대기업, 공공기관, 연구소 등 다양한 분야로 진출하고 있으며, 전체 취업률 64.1%를 기록하고 있습니다!';\n\n    return careerInfo;\n  }\n\n  private async actionProvideCurriculumInfo(conversation: ConversationState, majorName?: string): Promise<string> {\n    const major = majorName || conversation.slots.majorInterest;\n    \n    const curriculumInfo: Record<string, any> = {\n      '컴퓨터융합학부': {\n        overview: '충남대학교 컴퓨터융합학부는 AI, 빅데이터, SW, 정보보호 핵심 기술 교육을 통한 SW 우수 인재 양성',\n        features: ['27명 전임교수진', '학부생 600여명+', '대학원생 200여명+'],\n        areas: ['인공지능', '데이터과학', '소프트웨어', 'IoT 임베디드시스템', '정보보호'],\n        career: '삼성전자, LG전자, 네이버, SK텔레콤, KT, 은행권 등'\n      },\n      '감성인지소프트웨어': {\n        overview: 'SW 융합연계전공으로 심리학과 컴퓨터공학의 융합 교육',\n        year1: '심리학 개론, 생물심리학, 웹 프로그래밍, 컴퓨터 프로그래밍',\n        year2: '광고심리학, 임상심리학, 알고리즘, SW종합설계',\n        year3: '심리학-컴퓨터공학 융합 프로젝트'\n      },\n      '창의융합대학': {\n        overview: '2025년 신설, 전공자율선택제 운영',\n        features: ['1학년 전공 탐색', '2학년 진학시 64개 전공 선택', '뉴비(New飛) 프로그램'],\n        departments: ['자율전공융합학부', '인문사회융합학부', '공학융합학부', '자연과학융합학부', '첨단융합학부', '농생명융합학부']\n      }\n    };\n\n    const info = curriculumInfo[major || ''];\n    if (!info) {\n      return `충남대학교 ${major || '해당 전공'}의 상세 정보를 준비 중입니다. 컴퓨터융합학부, 창의융합대학, 감성인지소프트웨어 전공에 대해 문의해주세요.`;\n    }\n\n    if (major === '컴퓨터융합학부') {\n      return `**충남대학교 컴퓨터융합학부**\n\n🎯 **교육 목표**: ${info.overview}\n\n👥 **규모**: ${info.features.join(', ')}\n\n📚 **주요 교육 분야**: ${info.areas.join(', ')}\n\n💼 **주요 진출 기업**: ${info.career}\n\n충남대 컴퓨터융합학부는 4차산업혁명의 핵심 기술 교육을 통해 실무능력을 갖춘 전문가를 양성합니다!`;\n    }\n\n    if (major === '창의융합대학') {\n      return `**충남대학교 창의융합대학 (2025년 신설)**\n\n🎯 **특징**: ${info.overview}\n\n🏫 **구성 학부**: ${info.departments.join(', ')}\n\n📋 **교육 시스템**: ${info.features.join(', ')}\n\n전공 초월 진로 탐색과 창의융합 교육을 통해 미래사회를 선도하는 자기주도적 인재를 양성합니다!`;\n    }\n\n    return `**${major}**\n\n${info.overview}\n\n1단계: ${info.year1}\n2단계: ${info.year2}\n3단계: ${info.year3}`;\n  }\n\n  private async actionCompareMajors(conversation: ConversationState): Promise<string> {\n    const { recommendedMajors } = conversation.slots;\n    \n    if (!recommendedMajors || recommendedMajors.length < 2) {\n      return `전공 비교를 위해 관심 있는 전공들을 알려주세요. 예: \"컴퓨터공학과와 소프트웨어학과 비교해주세요\"`;\n    }\n\n    const comparisons = [\n      `**${recommendedMajors[0]} vs ${recommendedMajors[1]}**`,\n      '',\n      `🔍 **학습 초점**:`,\n      `• ${recommendedMajors[0]}: 이론과 시스템 구조에 중점`,\n      `• ${recommendedMajors[1]}: 실무와 응용 개발에 중점`,\n      '',\n      `💼 **진로 방향**:`,\n      `• ${recommendedMajors[0]}: 연구개발, 시스템 엔지니어`,\n      `• ${recommendedMajors[1]}: 제품 개발, 창업`,\n      '',\n      `당신의 성향을 고려할 때 두 전공 모두 적합하지만, 더 구체적인 관심사를 알려주시면 더 정확한 추천을 드릴 수 있습니다.`\n    ];\n\n    return comparisons.join('\\n');\n  }\n\n  private async actionProvideSimilarCases(conversation: ConversationState): Promise<string> {\n    const { riasecScores } = conversation.slots;\n    \n    if (!riasecScores) {\n      return '유사 사례를 제공하기 위해 먼저 RIASEC 진단을 받아보세요.';\n    }\n\n    try {\n      const feedback = await pineconeService.generateFeedbackFromSimilarCases(\n        riasecScores,\n        conversation.slots.recommendedMajors || []\n      );\n      \n      return `**비슷한 성향의 선배들 경험담**\\n\\n${feedback}\\n\\n이런 사례들이 도움이 되시나요? 더 구체적인 질문이 있으시면 언제든 말씀해주세요!`;\n    } catch (error) {\n      return '유사 사례 정보를 가져오는 중 오류가 발생했습니다. 다시 시도해주세요.';\n    }\n  }\n\n  private async actionAddressConcern(conversation: ConversationState, message: string): Promise<string> {\n    try {\n      const prompt = `\n사용자가 다음과 같은 걱정이나 우려를 표현했습니다:\n\"${message}\"\n\n전공 선택에 대한 걱정을 가진 학생에게 다음 관점에서 격려하고 조언해주세요:\n1. 걱정하는 것이 자연스럽다는 공감\n2. 구체적이고 실용적인 해결 방안\n3. 긍정적인 격려와 동기부여\n4. 추가 도움 방법 안내\n\n따뜻하고 전문적인 톤으로 3-4문장으로 답변해주세요.\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.7,\n        max_tokens: 300\n      });\n\n      return response.choices[0].message.content || '걱정하지 마세요. 충분히 고민하고 계신 것 자체가 좋은 선택을 할 수 있는 첫걸음입니다.';\n    } catch (error) {\n      return '걱정되는 마음 충분히 이해합니다. 전공 선택은 중요한 결정이지만, 언제든 수정하고 발전시킬 수 있어요. 더 구체적으로 어떤 부분이 걱정되시는지 말씀해주시면 도움을 드릴게요.';\n    }\n  }\n\n  private async actionGeneralResponse(conversation: ConversationState, message: string): Promise<string> {\n    const { riasecScores, recommendedMajors } = conversation.slots;\n    \n    const contextPrompt = riasecScores ? \n      `사용자의 RIASEC 성향: ${JSON.stringify(riasecScores)}\n추천 전공: ${recommendedMajors?.join(', ') || '없음'}\n\n이 정보를 바탕으로 답변해주세요.` : '';\n\n    const prompt = `\n당신은 충남대학교 창의융합대학 전공 상담 AI입니다. 충남대학교 정보를 기반으로 사용자의 모든 질문에 자유롭고 도움이 되도록 답변해주세요.\n\n질문: \"${message}\"\n\n${contextPrompt}\n\n충남대학교 기본 정보:\n- **창의융합대학**: 2025년 신설, 6개 융합학부로 구성된 새로운 대학 (전공자율선택제)\n- **전공자율선택제**: 창의융합대학 학생은 1학년 전공 탐색 후 2학년 진학 시 64개 전공 중 선택\n- **컴퓨터융합학부**: 공과대학 소속, 기존 컴퓨터공학과에서 명칭 변경된 학부\n- **취업률**: 전체 64.1% (2024년 기준)\n- **주요 진출기업**: 삼성전자, LG전자, 네이버, SK텔레콤, KT 등\n\n답변 지침:\n1. 충남대학교 정보를 중심으로 답변 (창의융합대학과 컴퓨터융합학부는 서로 다른 조직임을 명확히 구분)\n2. 창의융합대학의 전공자율선택제와 기존 학과들의 차이점 설명\n3. 구체적인 충남대 취업 현황과 진출 기업 정보 제공\n4. 충남대 특색 교육과정과 프로그램 소개\n5. 자연스럽고 친근한 대화 스타일 사용\n6. 필요시 충남대 입학 관련 정보도 제공\n7. 답변 길이에 제한 없이 충분히 상세하게 설명\n8. 창의적이고 유익한 답변 제공\n    `;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: prompt }],\n        temperature: 0.9,\n        max_tokens: 1000\n      });\n\n      return response.choices[0].message.content || '죄송합니다. 다시 한번 질문해주시겠어요?';\n    } catch (error) {\n      return '죄송합니다. 답변 생성 중 오류가 발생했습니다. 다시 시도해주세요.';\n    }\n  }\n\n  // Main conversation processing method\n  async processMessage(\n    sessionId: string,\n    message: string,\n    riasecScores?: RIASECScores,\n    recommendedMajors?: string[]\n  ): Promise<string> {\n    try {\n      // Initialize conversation if not exists\n      if (!this.conversations.has(sessionId)) {\n        this.conversations.set(sessionId, {\n          sessionId,\n          slots: { riasecScores, recommendedMajors },\n          conversationStage: 'greeting',\n          messageHistory: []\n        });\n      }\n\n      const conversation = this.conversations.get(sessionId)!;\n      \n      // Update slots if provided\n      if (riasecScores) {\n        this.updateSlots(sessionId, { riasecScores });\n      }\n      if (recommendedMajors) {\n        this.updateSlots(sessionId, { recommendedMajors });\n      }\n\n      // Add user message to history\n      conversation.messageHistory.push({\n        role: 'user',\n        content: message,\n        timestamp: new Date().toISOString()\n      });\n\n      // 제한적인 의도 분류 시스템을 우회하고 바로 자유로운 응답 생성\n      const response = await this.actionGeneralResponse(conversation, message);\n\n      // Add AI response to history\n      conversation.messageHistory.push({\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      });\n\n      return response;\n    } catch (error) {\n      console.error('Rasa-like processing error:', error);\n      return '죄송합니다. 메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.';\n    }\n  }\n\n  // Get conversation state\n  getConversation(sessionId: string): ConversationState | undefined {\n    return this.conversations.get(sessionId);\n  }\n\n  // Clear conversation\n  clearConversation(sessionId: string): void {\n    this.conversations.delete(sessionId);\n  }\n}\n\nexport const rasaService = new RasaLikeService();","size_bytes":21585},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { \n  insertAssessmentSchema, \n  insertChatSessionSchema,\n  insertUserSchema,\n  loginUserSchema,\n  insertSatisfactionSurveySchema,\n  type RIASECScores, \n  type ChatMessage,\n  type User \n} from \"@shared/schema\";\nimport OpenAI from \"openai\";\nimport { pineconeService } from \"./pinecone\";\nimport { rasaService } from \"./rasa\";\nimport { minimalValidator } from \"./minimal-validator\";\nimport { naturalChatService } from \"./natural-chat\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\n// Session interface extension\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n    user: User;\n  }\n}\n\n// Authentication middleware\nconst requireAuth = (req: any, res: any, next: any) => {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"인증이 필요합니다\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware setup\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key-development',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Initialize Pinecone service\n  try {\n    await pineconeService.initialize();\n    console.log(\"Pinecone service initialized successfully\");\n  } catch (error) {\n    console.error(\"Failed to initialize Pinecone service:\", error);\n  }\n\n  // ==== AUTHENTICATION ROUTES ====\n  \n  // Register route\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if username or student ID already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"이미 사용 중인 사용자명입니다\" });\n      }\n\n      const existingStudent = await storage.getUserByStudentId(userData.studentId);\n      if (existingStudent) {\n        return res.status(400).json({ message: \"이미 등록된 학번입니다\" });\n      }\n\n      const user = await storage.createUser(userData);\n      \n      // Set session\n      req.session.userId = user.id;\n      req.session.user = user;\n      \n      // Don't send password back\n      const { password, ...userResponse } = user;\n      res.status(201).json({ user: userResponse });\n    } catch (error: any) {\n      if (error.errors) {\n        // Zod validation errors\n        return res.status(400).json({ \n          message: \"입력 정보를 확인해주세요\",\n          errors: error.errors \n        });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"회원가입 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Login route\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = loginUserSchema.parse(req.body);\n      \n      const user = await storage.validateUser(username, password);\n      if (!user) {\n        return res.status(401).json({ message: \"사용자명 또는 비밀번호가 올바르지 않습니다\" });\n      }\n\n      // Set session\n      req.session.userId = user.id;\n      req.session.user = user;\n\n      // Don't send password back\n      const { password: _, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error: any) {\n      if (error.errors) {\n        return res.status(400).json({ \n          message: \"입력 정보를 확인해주세요\",\n          errors: error.errors \n        });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"로그인 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"로그아웃 중 오류가 발생했습니다\" });\n      }\n      res.json({ message: \"로그아웃되었습니다\" });\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/auth/user\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        // Clear invalid session\n        req.session.destroy((err) => {\n          if (err) console.error(\"Session destroy error:\", err);\n        });\n        return res.status(401).json({ message: \"인증이 필요합니다\" });\n      }\n      \n      const { password, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"사용자 정보 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // ==== SATISFACTION SURVEY ROUTES ====\n  \n  // Create satisfaction survey\n  app.post(\"/api/satisfaction-surveys\", requireAuth, async (req, res) => {\n    try {\n      const surveyData = insertSatisfactionSurveySchema.parse({\n        ...req.body,\n        userId: req.session.userId\n      });\n\n      // GPT 무결성 검사\n      const validationResult = await minimalValidator.validateSatisfactionSurvey({\n        assessmentId: surveyData.assessmentId,\n        overallSatisfaction: surveyData.overallSatisfaction,\n        accuracyRating: surveyData.accuracyRating,\n        usefulnessRating: surveyData.usefulnessRating,\n        selectedMajor: surveyData.selectedMajor,\n        feedback: surveyData.feedback\n      });\n\n      // 검증 실패시 경고와 함께 저장하되 사용자에게 알림\n      if (!validationResult.isValid && validationResult.confidence > 0.7) {\n        console.warn(\"만족도 조사 데이터 검증 실패:\", validationResult.issues);\n        // 심각한 오류가 아니면 저장은 진행하되 로그 기록\n      }\n\n      const survey = await storage.createSatisfactionSurvey(surveyData);\n      \n      // Store survey data in Pinecone for case study collection\n      await pineconeService.storeCaseStudy({\n        id: `survey-${survey.id}`,\n        assessmentId: survey.assessmentId,\n        riasecScores: { realistic: 0, investigative: 0, artistic: 0, social: 0, enterprising: 0, conventional: 0 }, // Will be populated from assessment\n        selectedMajor: survey.selectedMajor || \"\",\n        satisfaction: survey.overallSatisfaction,\n        feedback: survey.feedback || \"\",\n        timestamp: new Date().toISOString()\n      });\n\n      const response: any = { survey };\n      \n      // 검증 결과가 있으면 포함\n      if (!validationResult.isValid && validationResult.suggestions.length > 0) {\n        response.validationWarnings = validationResult.suggestions;\n      }\n\n      res.status(201).json(response);\n    } catch (error: any) {\n      if (error.errors) {\n        return res.status(400).json({ \n          message: \"입력 정보를 확인해주세요\",\n          errors: error.errors \n        });\n      }\n      console.error(\"Create satisfaction survey error:\", error);\n      res.status(500).json({ message: \"만족도 조사 저장 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Get satisfaction surveys for user\n  app.get(\"/api/satisfaction-surveys\", requireAuth, async (req, res) => {\n    try {\n      const surveys = await storage.getSatisfactionSurveysByUser(req.session.userId!);\n      res.json(surveys);\n    } catch (error) {\n      console.error(\"Get satisfaction surveys error:\", error);\n      res.status(500).json({ message: \"만족도 조사 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Get satisfaction survey by assessment\n  app.get(\"/api/satisfaction-surveys/assessment/:assessmentId\", requireAuth, async (req, res) => {\n    try {\n      const { assessmentId } = req.params;\n      const survey = await storage.getSatisfactionSurveyByAssessment(assessmentId);\n      \n      if (!survey) {\n        return res.status(404).json({ message: \"만족도 조사를 찾을 수 없습니다\" });\n      }\n\n      // Verify ownership\n      if (survey.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"접근 권한이 없습니다\" });\n      }\n\n      res.json(survey);\n    } catch (error) {\n      console.error(\"Get satisfaction survey by assessment error:\", error);\n      res.status(500).json({ message: \"만족도 조사 조회 중 오류가 발생했습니다\" });\n    }\n  });\n  \n  // ==== ASSESSMENT ROUTES ====\n  \n  // Analyze RIASEC from assessment responses\n  app.post(\"/api/analyze-riasec\", requireAuth, async (req, res) => {\n    try {\n      const { responses } = req.body;\n      \n      if (!responses || typeof responses !== 'object') {\n        return res.status(400).json({ message: \"응답 데이터가 필요합니다.\" });\n      }\n\n      // Calculate RIASEC scores directly from responses (standardized to 100 points)\n      // Map question IDs to RIASEC types based on actual question data\n      const riasecMapping: { [key: number]: keyof RIASECScores } = {\n        1: \"realistic\", 2: \"realistic\", 3: \"realistic\",           // Questions 1-3: Realistic\n        4: \"investigative\", 5: \"investigative\", 6: \"investigative\", // Questions 4-6: Investigative\n        7: \"artistic\", 8: \"artistic\", 9: \"artistic\",             // Questions 7-9: Artistic\n        10: \"social\", 11: \"social\", 12: \"social\",                // Questions 10-12: Social\n        13: \"enterprising\", 14: \"enterprising\", 15: \"enterprising\", // Questions 13-15: Enterprising\n        16: \"conventional\", 17: \"conventional\", 18: \"conventional\"  // Questions 16-18: Conventional\n      };\n\n      const rawScores = {\n        realistic: 0,\n        investigative: 0, \n        artistic: 0,\n        social: 0,\n        enterprising: 0,\n        conventional: 0\n      };\n\n      // Calculate total scores for each RIASEC type\n      Object.entries(responses).forEach(([questionId, score]) => {\n        const questionNum = parseInt(questionId);\n        const riasecType = riasecMapping[questionNum];\n        if (riasecType && typeof score === 'number') {\n          rawScores[riasecType] += score;\n        }\n      });\n\n      // Standardize scores to 100-point scale\n      // Each RIASEC type has 3 questions with 1-5 scale, so max possible is 15 per type\n      const riasecScores: RIASECScores = {\n        realistic: Math.round((rawScores.realistic / 15) * 100),\n        investigative: Math.round((rawScores.investigative / 15) * 100),\n        artistic: Math.round((rawScores.artistic / 15) * 100),\n        social: Math.round((rawScores.social / 15) * 100),\n        enterprising: Math.round((rawScores.enterprising / 15) * 100),\n        conventional: Math.round((rawScores.conventional / 15) * 100)\n      };\n\n      // Log calculated scores for debugging\n      console.log(\"Raw scores:\", rawScores);\n      console.log(\"Standardized RIASEC scores (0-100):\", riasecScores);\n      \n      // Get major recommendations based on calculated RIASEC scores\n      const majorPrompt = `다음 RIASEC 성향 분석 결과를 바탕으로 창의융합학부의 전공을 추천해주세요.\n\nRIASEC 점수: ${JSON.stringify(riasecScores)}\n\n창의융합학부 전공 목록:\n- 컴퓨터공학과\n- 소프트웨어학과  \n- 정보통계학과\n- 디지털미디어학과\n- 산업공학과\n- 건축학과\n- 도시계획학과\n- 환경공학과\n- 신소재공학과\n- 화학공학과\n\n각 전공에 대해 다음 정보를 포함하여 JSON으로 응답해주세요:\n{\n  \"recommendations\": [\n    {\n      \"major\": \"전공명\",\n      \"matchRate\": 0-100,\n      \"reason\": \"추천 이유 (2-3문장)\"\n    }\n  ],\n  \"explanation\": \"전체적인 성향 분석 및 전공 추천 근거 (4-5문장)\"\n}\n\n상위 3개 전공만 추천해주세요.`;\n\n      const majorCompletion = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [\n          {\n            role: \"system\",\n            content: \"당신은 대학 전공 상담 전문가입니다. RIASEC 성향에 맞는 전공을 추천해주세요.\"\n          },\n          {\n            role: \"user\",\n            content: majorPrompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.5\n      });\n\n      const majorResult = JSON.parse(majorCompletion.choices[0].message.content || \"{}\");\n      \n      // GPT 무결성 검사 - RIASEC 분석 결과 검증\n      const validationResult = await minimalValidator.validateRiasecAssessment({\n        responses,\n        riasecScores,\n        recommendedMajors: majorResult.recommendations?.map((r: any) => r.major) || []\n      });\n\n      // 간단한 로그만 기록 (GPT 검증 제거)\n      if (!validationResult.isValid) {\n        console.log(\"Basic validation issues:\", validationResult.issues);\n      }\n      \n      // Generate additional feedback from similar cases using Pinecone\n      let similarCasesFeedback = \"\";\n      try {\n        similarCasesFeedback = await pineconeService.generateFeedbackFromSimilarCases(\n          riasecScores,\n          majorResult.recommendations?.map((r: any) => r.major) || []\n        );\n      } catch (error) {\n        console.error(\"Failed to get similar cases feedback:\", error);\n      }\n\n      // Save assessment with similar cases feedback\n      const assessment = await storage.createAssessment({\n        userId: req.session.userId!, // Use logged in user\n        responses,\n        riasecScores,\n        recommendedMajors: majorResult.recommendations?.map((r: any) => r.major) || [],\n        explanation: majorResult.explanation || \"추천 전공을 확인하시고 상담을 받아보세요.\",\n        similarCasesFeedback: similarCasesFeedback || null\n      });\n\n      const response: any = {\n        assessmentId: assessment.id,\n        riasecScores,\n        recommendations: majorResult.recommendations || [],\n        explanation: majorResult.explanation || \"추천 전공을 확인하시고 상담을 받아보세요.\",\n        similarCasesFeedback\n      };\n\n      // 검증 경고사항이 있으면 포함 (간단한 검증만)\n      if (!validationResult.isValid && validationResult.suggestions) {\n        response.validationWarnings = validationResult.suggestions;\n        response.validationNote = \"분석 결과에 일부 불일치가 감지되었습니다. 추가 상담을 권장합니다.\";\n      }\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"RIASEC analysis error:\", error);\n      res.status(500).json({ message: \"성향 분석 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Get major recommendations based on RIASEC scores\n  app.post(\"/api/recommend-majors\", requireAuth, async (req, res) => {\n    try {\n      const { riasecScores } = req.body;\n      \n      if (!riasecScores) {\n        return res.status(400).json({ message: \"RIASEC 점수가 필요합니다.\" });\n      }\n\n      // Log the received scores for debugging\n      console.log(\"Received RIASEC scores for recommendation:\", riasecScores);\n\n      const prompt = `다음 RIASEC 성향 분석 결과를 바탕으로 창의융합학부의 전공을 추천해주세요.\n\nRIASEC 점수 (각 항목 100점 만점): ${JSON.stringify(riasecScores)}\n\n창의융합학부 전공 목록:\n- 컴퓨터공학과\n- 소프트웨어학과  \n- 정보통계학과\n- 디지털미디어학과\n- 산업공학과\n- 건축학과\n- 도시계획학과\n- 환경공학과\n- 신소재공학과\n- 화학공학과\n\n각 전공에 대해 다음 정보를 포함하여 JSON으로 응답해주세요:\n{\n  \"recommendations\": [\n    {\n      \"major\": \"전공명\",\n      \"matchRate\": 0-100,\n      \"reason\": \"추천 이유 (2-3문장)\"\n    }\n  ],\n  \"explanation\": \"전체적인 성향 분석 및 전공 추천 근거 (4-5문장)\"\n}\n\n상위 3개 전공만 추천해주세요.`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [\n          {\n            role: \"system\",\n            content: \"당신은 대학 전공 상담 전문가입니다. RIASEC 성향에 맞는 전공을 추천해주세요.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.5\n      });\n\n      const result = JSON.parse(completion.choices[0].message.content || \"{}\");\n      \n      // Generate additional feedback from similar cases using Pinecone\n      let similarCasesFeedback = \"\";\n      try {\n        similarCasesFeedback = await pineconeService.generateFeedbackFromSimilarCases(\n          riasecScores,\n          result.recommendations?.map((r: any) => r.major) || []\n        );\n      } catch (error) {\n        console.error(\"Failed to get similar cases feedback:\", error);\n      }\n      \n      // Add similar cases feedback to the result\n      if (similarCasesFeedback) {\n        result.similarCasesFeedback = similarCasesFeedback;\n      }\n\n      // Save assessment with similar cases feedback\n      const assessment = await storage.createAssessment({\n        userId: req.session.userId!, // Use logged in user\n        responses: riasecScores,\n        riasecScores,\n        recommendedMajors: result.recommendations?.map((r: any) => r.major) || [],\n        explanation: result.explanation || \"추천 전공을 확인하시고 상담을 받아보세요.\",\n        similarCasesFeedback: similarCasesFeedback || null\n      });\n      \n      // Return assessment ID along with results\n      res.json({ ...result, assessmentId: assessment.id });\n    } catch (error) {\n      console.error(\"Major recommendation error:\", error);\n      res.status(500).json({ message: \"전공 추천 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Save assessment results\n  app.post(\"/api/assessments\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertAssessmentSchema.parse({\n        ...req.body,\n        userId: req.session.userId!\n      });\n      const assessment = await storage.createAssessment(validatedData);\n      res.json(assessment);\n    } catch (error) {\n      console.error(\"Save assessment error:\", error);\n      res.status(500).json({ message: \"진단 결과 저장 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Get all assessments for current user\n  app.get(\"/api/assessments\", requireAuth, async (req, res) => {\n    try {\n      const assessments = await storage.getAssessmentsByUser(req.session.userId!);\n      res.json(assessments);\n    } catch (error) {\n      console.error(\"Get assessments error:\", error);\n      res.status(500).json({ message: \"진단 결과 조회 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Get assessment by ID\n  app.get(\"/api/assessments/:id\", requireAuth, async (req, res) => {\n    try {\n      const assessment = await storage.getAssessment(req.params.id);\n      if (!assessment) {\n        return res.status(404).json({ message: \"진단 결과를 찾을 수 없습니다.\" });\n      }\n      \n      // Verify ownership\n      if (assessment.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"접근 권한이 없습니다.\" });\n      }\n      \n      res.json(assessment);\n    } catch (error) {\n      console.error(\"Get assessment error:\", error);\n      res.status(500).json({ message: \"진단 결과 조회 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Natural conversational chat\n  app.post(\"/api/chat\", requireAuth, async (req, res) => {\n    try {\n      const { message, sessionId, riasecScores, recommendedMajors } = req.body;\n      \n      if (!message) {\n        return res.status(400).json({ message: \"메시지가 필요합니다.\" });\n      }\n\n      // Get or create chat session\n      let session = sessionId ? await storage.getChatSession(sessionId) : null;\n      \n      if (!session) {\n        session = await storage.createChatSession({\n          userId: req.session.userId!,\n          messages: []\n        });\n      }\n\n      const userId = req.session.userId!;\n      \n      // Update user profile with RIASEC scores if available\n      if (riasecScores) {\n        naturalChatService.updateUserProfile(userId, { riasecScores });\n      }\n\n      // Generate natural response (includes all filtering and enhancement)\n      const aiResponse = await naturalChatService.generateNaturalResponse(userId, message);\n\n      // Extract interests and update profile only if response was successful\n      if (!aiResponse.includes(\"시간당 메시지 한도\") && !aiResponse.includes(\"부적절한 내용\")) {\n        await naturalChatService.extractAndUpdateInterests(userId, message);\n        naturalChatService.updateConversationHistory(userId, message, aiResponse);\n      }\n\n      // Update session with new messages\n      const newMessage: ChatMessage = {\n        role: \"user\",\n        content: message,\n        timestamp: new Date().toISOString()\n      };\n      \n      const aiMessage: ChatMessage = {\n        role: \"assistant\", \n        content: aiResponse,\n        timestamp: new Date().toISOString()\n      };\n\n      const updatedMessages = [...session.messages, newMessage, aiMessage];\n      \n      await storage.updateChatSession(session.id, {\n        messages: updatedMessages\n      });\n\n      res.json({\n        response: aiResponse,\n        sessionId: session.id\n      });\n    } catch (error) {\n      console.error(\"Natural chat error:\", error);\n      res.status(500).json({ message: \"채팅 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Store user case study for future similarity search\n  app.post(\"/api/store-case-study\", async (req, res) => {\n    try {\n      const { riasecScores, selectedMajor, satisfactionRating, description, graduationYear, careerPath } = req.body;\n      \n      if (!riasecScores || !selectedMajor || !satisfactionRating) {\n        return res.status(400).json({ message: \"필수 정보가 누락되었습니다.\" });\n      }\n\n      const caseStudy = {\n        id: `case-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        riasecScores,\n        selectedMajor,\n        satisfactionRating,\n        description: description || \"사례 정보\",\n        graduationYear,\n        careerPath\n      };\n\n      await pineconeService.storeCaseStudy(caseStudy);\n      \n      res.json({ message: \"사례가 성공적으로 저장되었습니다.\", caseId: caseStudy.id });\n    } catch (error) {\n      console.error(\"Store case study error:\", error);\n      res.status(500).json({ message: \"사례 저장 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Get similar cases for a given RIASEC profile\n  app.post(\"/api/similar-cases\", async (req, res) => {\n    try {\n      const { riasecScores, topK = 5 } = req.body;\n      \n      if (!riasecScores) {\n        return res.status(400).json({ message: \"RIASEC 점수가 필요합니다.\" });\n      }\n\n      const similarCases = await pineconeService.findSimilarCases(riasecScores, topK);\n      \n      res.json({ similarCases });\n    } catch (error) {\n      console.error(\"Similar cases error:\", error);\n      res.status(500).json({ message: \"유사 사례 검색 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Get conversation state for debugging/management\n  app.get(\"/api/conversation/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const conversation = rasaService.getConversation(sessionId);\n      \n      if (!conversation) {\n        return res.status(404).json({ message: \"대화를 찾을 수 없습니다.\" });\n      }\n      \n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Get conversation error:\", error);\n      res.status(500).json({ message: \"대화 정보 조회 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  // Profile image upload endpoint\n  app.post(\"/api/profile/image\", requireAuth, async (req, res) => {\n    try {\n      const { imageData } = req.body;\n      const userId = req.session.userId!;\n      \n      if (!imageData || !imageData.startsWith('data:image/')) {\n        return res.status(400).json({ message: \"올바른 이미지 데이터가 필요합니다.\" });\n      }\n\n      // Update user profile image\n      await storage.updateUserProfileImage(userId, imageData);\n      \n      res.json({ message: \"프로필 이미지가 성공적으로 업데이트되었습니다.\" });\n    } catch (error) {\n      console.error(\"Profile image upload error:\", error);\n      res.status(500).json({ message: \"프로필 이미지 업로드 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":24887},"server/storage.ts":{"content":"import {\n  users,\n  assessments,\n  chatSessions,\n  satisfactionSurveys,\n  bookmarkedMajors,\n  userPreferences,\n  type User,\n  type Assessment,\n  type ChatSession,\n  type SatisfactionSurvey,\n  type BookmarkedMajor,\n  type UserPreferences,\n  type InsertUser,\n  type InsertAssessment,\n  type InsertChatSession,\n  type InsertSatisfactionSurvey,\n  type InsertBookmarkedMajor,\n  type InsertUserPreferences,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByStudentId(studentId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  validateUser(username: string, password: string): Promise<User | null>;\n  updateUserProfileImage(id: string, profileImage: string): Promise<User | undefined>;\n  \n  // Assessment operations\n  getAssessment(id: string): Promise<Assessment | undefined>;\n  createAssessment(assessment: InsertAssessment): Promise<Assessment>;\n  getAssessmentsByUser(userId: string): Promise<Assessment[]>;\n  \n  // Chat operations\n  getChatSession(id: string): Promise<ChatSession | undefined>;\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  updateChatSession(id: string, session: Partial<ChatSession>): Promise<ChatSession | undefined>;\n  getChatSessionsByUser(userId: string): Promise<ChatSession[]>;\n  \n  // Satisfaction survey operations\n  getSatisfactionSurvey(id: string): Promise<SatisfactionSurvey | undefined>;\n  createSatisfactionSurvey(survey: InsertSatisfactionSurvey): Promise<SatisfactionSurvey>;\n  getSatisfactionSurveysByUser(userId: string): Promise<SatisfactionSurvey[]>;\n  getSatisfactionSurveyByAssessment(assessmentId: string): Promise<SatisfactionSurvey | undefined>;\n  updateSatisfactionSurvey(id: string, survey: Partial<SatisfactionSurvey>): Promise<SatisfactionSurvey | undefined>;\n  \n  // Bookmark operations\n  createBookmark(bookmark: InsertBookmarkedMajor): Promise<BookmarkedMajor>;\n  getUserBookmarks(userId: string): Promise<BookmarkedMajor[]>;\n  deleteBookmark(id: string): Promise<void>;\n\n  // User preferences operations\n  getUserPreferences(userId: string): Promise<UserPreferences | undefined>;\n  upsertUserPreferences(preferences: InsertUserPreferences): Promise<UserPreferences>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByStudentId(studentId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.studentId, studentId));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hash password before storing\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        password: hashedPassword,\n      })\n      .returning();\n    return user;\n  }\n\n  async validateUser(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n\n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async updateUserProfileImage(id: string, profileImage: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ profileImage, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Assessment operations\n  async getAssessment(id: string): Promise<Assessment | undefined> {\n    const [assessment] = await db.select().from(assessments).where(eq(assessments.id, id));\n    return assessment || undefined;\n  }\n\n  async getAssessmentsByUser(userId: string): Promise<Assessment[]> {\n    return await db\n      .select()\n      .from(assessments)\n      .where(eq(assessments.userId, userId))\n      .orderBy(desc(assessments.createdAt));\n  }\n\n  async createAssessment(insertAssessment: InsertAssessment): Promise<Assessment> {\n    const [assessment] = await db\n      .insert(assessments)\n      .values(insertAssessment)\n      .returning();\n    return assessment;\n  }\n\n  // Chat operations\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    const [session] = await db.select().from(chatSessions).where(eq(chatSessions.id, id));\n    return session || undefined;\n  }\n\n  async createChatSession(insertChatSession: InsertChatSession): Promise<ChatSession> {\n    const [session] = await db\n      .insert(chatSessions)\n      .values(insertChatSession)\n      .returning();\n    return session;\n  }\n\n  async updateChatSession(id: string, session: Partial<ChatSession>): Promise<ChatSession | undefined> {\n    const [updatedSession] = await db\n      .update(chatSessions)\n      .set(session)\n      .where(eq(chatSessions.id, id))\n      .returning();\n    return updatedSession || undefined;\n  }\n\n  async getChatSessionsByUser(userId: string): Promise<ChatSession[]> {\n    return await db\n      .select()\n      .from(chatSessions)\n      .where(eq(chatSessions.userId, userId))\n      .orderBy(desc(chatSessions.createdAt));\n  }\n\n  // Satisfaction survey operations\n  async getSatisfactionSurvey(id: string): Promise<SatisfactionSurvey | undefined> {\n    const [survey] = await db.select().from(satisfactionSurveys).where(eq(satisfactionSurveys.id, id));\n    return survey || undefined;\n  }\n\n  async createSatisfactionSurvey(insertSurvey: InsertSatisfactionSurvey): Promise<SatisfactionSurvey> {\n    const [survey] = await db\n      .insert(satisfactionSurveys)\n      .values(insertSurvey)\n      .returning();\n    return survey;\n  }\n\n  async getSatisfactionSurveysByUser(userId: string): Promise<SatisfactionSurvey[]> {\n    return await db\n      .select()\n      .from(satisfactionSurveys)\n      .where(eq(satisfactionSurveys.userId, userId))\n      .orderBy(desc(satisfactionSurveys.createdAt));\n  }\n\n  async getSatisfactionSurveyByAssessment(assessmentId: string): Promise<SatisfactionSurvey | undefined> {\n    const [survey] = await db\n      .select()\n      .from(satisfactionSurveys)\n      .where(eq(satisfactionSurveys.assessmentId, assessmentId));\n    return survey || undefined;\n  }\n\n  async updateSatisfactionSurvey(id: string, survey: Partial<SatisfactionSurvey>): Promise<SatisfactionSurvey | undefined> {\n    const [updatedSurvey] = await db\n      .update(satisfactionSurveys)\n      .set(survey)\n      .where(eq(satisfactionSurveys.id, id))\n      .returning();\n    return updatedSurvey || undefined;\n  }\n\n  // Bookmark operations\n  async createBookmark(insertBookmark: InsertBookmarkedMajor): Promise<BookmarkedMajor> {\n    const [bookmark] = await db\n      .insert(bookmarkedMajors)\n      .values(insertBookmark)\n      .returning();\n    return bookmark;\n  }\n\n  async getUserBookmarks(userId: string): Promise<BookmarkedMajor[]> {\n    return await db\n      .select()\n      .from(bookmarkedMajors)\n      .where(eq(bookmarkedMajors.userId, userId))\n      .orderBy(desc(bookmarkedMajors.createdAt));\n  }\n\n  async deleteBookmark(id: string): Promise<void> {\n    await db.delete(bookmarkedMajors).where(eq(bookmarkedMajors.id, id));\n  }\n\n  // User preferences operations\n  async getUserPreferences(userId: string): Promise<UserPreferences | undefined> {\n    const [preferences] = await db\n      .select()\n      .from(userPreferences)\n      .where(eq(userPreferences.userId, userId));\n    return preferences || undefined;\n  }\n\n  async upsertUserPreferences(insertPreferences: InsertUserPreferences): Promise<UserPreferences> {\n    const [preferences] = await db\n      .insert(userPreferences)\n      .values(insertPreferences)\n      .onConflictDoUpdate({\n        target: userPreferences.userId,\n        set: {\n          ...insertPreferences,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return preferences;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":8375},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, json, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\", { length: 9 }).notNull().unique(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  profileImage: text(\"profile_image\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const assessments = pgTable(\"assessments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  responses: json(\"responses\").$type<Record<string, number>>().notNull(),\n  riasecScores: json(\"riasec_scores\").$type<{\n    realistic: number;\n    investigative: number;\n    artistic: number;\n    social: number;\n    enterprising: number;\n    conventional: number;\n  }>().notNull(),\n  recommendedMajors: json(\"recommended_majors\").$type<string[]>().notNull(),\n  explanation: text(\"explanation\").notNull(),\n  similarCasesFeedback: text(\"similar_cases_feedback\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// 만족도 조사 테이블 추가\nexport const satisfactionSurveys = pgTable(\"satisfaction_surveys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  assessmentId: varchar(\"assessment_id\").references(() => assessments.id).notNull(),\n  overallSatisfaction: integer(\"overall_satisfaction\").notNull(), // 1-5\n  recommendationAccuracy: integer(\"recommendation_accuracy\").notNull(), // 1-5\n  systemUsability: integer(\"system_usability\").notNull(), // 1-5\n  wouldRecommend: boolean(\"would_recommend\").notNull(),\n  feedback: text(\"feedback\"),\n  selectedMajor: varchar(\"selected_major\"),\n  majorSatisfaction: integer(\"major_satisfaction\"), // 1-5, null if not selected yet\n  followUpDate: timestamp(\"follow_up_date\"), // 실제 전공 선택 후 추가 피드백 날짜\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Bookmarked majors table\nexport const bookmarkedMajors = pgTable(\"bookmarked_majors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  majorName: varchar(\"major_name\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// User preferences table\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  darkMode: boolean(\"dark_mode\").default(false),\n  emailNotifications: boolean(\"email_notifications\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  messages: json(\"messages\").$type<Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>>().notNull().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  studentId: true,\n  username: true,\n  password: true,\n}).extend({\n  studentId: z.string().regex(/^\\d{9}$/, \"학번은 9자리 숫자여야 합니다\").refine(\n    (studentId) => {\n      const year = parseInt(studentId.substring(0, 4));\n      const currentYear = new Date().getFullYear();\n      return year >= 2020 && year <= currentYear + 1;\n    },\n    \"학번의 첫 4자리는 유효한 년도여야 합니다\"\n  ),\n  username: z.string().min(3, \"사용자명은 최소 3자 이상이어야 합니다\"),\n  password: z.string().min(6, \"비밀번호는 최소 6자 이상이어야 합니다\"),\n});\n\nexport const loginUserSchema = z.object({\n  username: z.string().min(1, \"사용자명을 입력해주세요\"),\n  password: z.string().min(1, \"비밀번호를 입력해주세요\"),\n});\n\nexport const insertSatisfactionSurveySchema = createInsertSchema(satisfactionSurveys).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  overallSatisfaction: z.number().min(1).max(5),\n  recommendationAccuracy: z.number().min(1).max(5),\n  systemUsability: z.number().min(1).max(5),\n  wouldRecommend: z.boolean(),\n  feedback: z.string().optional(),\n  selectedMajor: z.string().optional(),\n  majorSatisfaction: z.number().min(1).max(5).optional(),\n});\n\nexport const insertAssessmentSchema = createInsertSchema(assessments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertAssessment = z.infer<typeof insertAssessmentSchema>;\nexport type Assessment = typeof assessments.$inferSelect;\n\nexport type InsertSatisfactionSurvey = z.infer<typeof insertSatisfactionSurveySchema>;\nexport type SatisfactionSurvey = typeof satisfactionSurveys.$inferSelect;\n\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\n\nexport type RIASECScores = {\n  realistic: number;\n  investigative: number;\n  artistic: number;\n  social: number;\n  enterprising: number;\n  conventional: number;\n};\n\nexport type AssessmentResponse = {\n  questionId: number;\n  answer: number;\n};\n\nexport type ChatMessage = {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: string;\n};\n\nexport const insertBookmarkedMajorSchema = createInsertSchema(bookmarkedMajors).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertBookmarkedMajor = z.infer<typeof insertBookmarkedMajorSchema>;\nexport type BookmarkedMajor = typeof bookmarkedMajors.$inferSelect;\n\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\n","size_bytes":6625},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Assessment from \"@/pages/assessment\";\nimport Results from \"@/pages/results\";\nimport Chat from \"@/pages/chat\";\nimport RiasecInfo from \"@/pages/riasec-info\";\nimport Help from \"@/pages/help\";\nimport Privacy from \"@/pages/privacy\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport SatisfactionSurvey from \"@/pages/satisfaction-survey\";\nimport Profile from \"@/pages/profile\";\n\nimport Navigation from \"@/components/navigation\";\nimport { FloatingChatButton } from \"@/components/floating-chat-button\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/assessment\" component={Assessment} />\n      <Route path=\"/results/:id?\" component={Results} />\n      <Route path=\"/satisfaction-survey/:assessmentId\" component={SatisfactionSurvey} />\n      <Route path=\"/chat\" component={Chat} />\n      <Route path=\"/profile\" component={Profile} />\n\n      <Route path=\"/riasec-info\" component={RiasecInfo} />\n      <Route path=\"/help\" component={Help} />\n      <Route path=\"/privacy\" component={Privacy} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"light\" storageKey=\"riasec-ui-theme\">\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-neutral-50 dark:bg-neutral-900\">\n            <Navigation />\n            <Toaster />\n            <Router />\n            <FloatingChatButton />\n          </div>\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2118},"client/src/index.css":{"content":"/* Custom Korean font - must be imported first */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(122, 39%, 49%);\n  --secondary-foreground: hsl(211, 100%, 99%);\n  --accent: hsl(15, 87%, 60%);\n  --accent-foreground: hsl(211, 100%, 99%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom colors for Korean UI */\n  --neutral-50: hsl(0, 0%, 98%);\n  --neutral-100: hsl(0, 0%, 96%);\n  --neutral-900: hsl(20, 14.3%, 4.1%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .animate-pulse-gentle {\n    animation: pulse 2s infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n  }\n  to { \n    opacity: 1; \n  }\n}\n\n@keyframes slideUp {\n  from { \n    transform: translateY(20px); \n    opacity: 0; \n  }\n  to { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n\n\nbody {\n  font-family: 'Noto Sans KR', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n}\n\n/* Chat bubble styles */\n.chat-bubble-user {\n  background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(213, 82%, 46%) 100%);\n}\n\n.chat-bubble-bot {\n  background: linear-gradient(135deg, hsl(0, 0%, 96%) 0%, hsl(0, 0%, 93%) 100%);\n}\n\n/* Custom scrollbar for chat */\n.overflow-y-auto::-webkit-scrollbar {\n  width: 6px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-track {\n  background: hsl(0, 0%, 96%);\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb {\n  background: hsl(207, 90%, 54%);\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb:hover {\n  background: hsl(213, 82%, 46%);\n}\n","size_bytes":3149},"client/src/main.tsx":{"content":"import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst queryClient = new QueryClient();\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"system\" storageKey=\"riasec-theme\">\n        <App />\n        <Toaster />\n      </ThemeProvider>\n    </QueryClientProvider>\n  </StrictMode>,\n);\n","size_bytes":648},"client/src/components/ProtectedRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"로그인이 필요합니다\",\n        description: \"이 기능을 사용하려면 먼저 로그인해주세요.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 1000);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-lg text-neutral-600\">인증 확인 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-neutral-900 mb-4\">로그인이 필요합니다</h2>\n          <p className=\"text-neutral-600 mb-6\">이 기능을 사용하려면 먼저 로그인해주세요.</p>\n          <div className=\"animate-pulse w-8 h-8 bg-primary/20 rounded-full mx-auto\"></div>\n          <p className=\"text-sm text-neutral-500 mt-2\">로그인 페이지로 이동 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":1708},"client/src/components/assessment-question.tsx":{"content":"import { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { AssessmentQuestion } from \"@/data/questions\";\n\ninterface AssessmentQuestionProps {\n  question: AssessmentQuestion;\n  questionNumber: number;\n  totalQuestions: number;\n  selectedAnswer?: number;\n  onAnswerChange: (value: number) => void;\n}\n\nconst answerOptions = [\n  { value: 5, label: \"매우 그렇다\" },\n  { value: 4, label: \"그렇다\" },\n  { value: 3, label: \"보통이다\" },\n  { value: 2, label: \"그렇지 않다\" },\n  { value: 1, label: \"전혀 그렇지 않다\" }\n];\n\nexport default function AssessmentQuestion({\n  question,\n  questionNumber,\n  totalQuestions,\n  selectedAnswer,\n  onAnswerChange\n}: AssessmentQuestionProps) {\n  return (\n    <Card className=\"animate-slide-up\">\n      <CardContent className=\"p-8\">\n        <div className=\"mb-6\">\n          <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary mb-4\">\n            질문 {questionNumber} / {totalQuestions}\n          </Badge>\n          <h2 className=\"text-xl font-semibold text-neutral-900 mb-3\">\n            {question.text}\n          </h2>\n          <p className=\"text-neutral-600\">\n            자신의 성향과 가장 가까운 답변을 선택해주세요.\n          </p>\n        </div>\n\n        <RadioGroup \n          value={selectedAnswer?.toString() || \"\"} \n          onValueChange={(value) => onAnswerChange(parseInt(value))}\n          className=\"space-y-3\"\n        >\n          {answerOptions.map((option) => (\n            <div \n              key={option.value} \n              className=\"flex items-center space-x-3 p-4 bg-neutral-50 rounded-xl border border-neutral-200 hover:border-primary/50 hover:bg-primary/5 transition-all cursor-pointer\"\n            >\n              <RadioGroupItem \n                value={option.value.toString()} \n                id={`option-${option.value}`}\n                className=\"text-primary\"\n              />\n              <Label \n                htmlFor={`option-${option.value}`} \n                className=\"flex-1 cursor-pointer text-neutral-800 font-medium\"\n              >\n                {option.label}\n              </Label>\n            </div>\n          ))}\n        </RadioGroup>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2395},"client/src/components/chat-interface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, Bot, User } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ChatMessage, RIASECScores } from \"@shared/schema\";\n\ninterface ChatInterfaceProps {\n  riasecScores?: RIASECScores | null;\n  recommendedMajors?: string[] | null;\n  className?: string;\n}\n\nexport default function ChatInterface({ \n  riasecScores, \n  recommendedMajors,\n  className = \"\"\n}: ChatInterfaceProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      role: \"assistant\",\n      content: \"안녕하세요! 전공 상담 AI입니다. 😊\\n\\n창의융합학부의 다양한 전공에 대해 궁금한 점이 있으시면 언제든지 물어보세요. RIASEC 진단 결과가 있다면 더욱 맞춤형 상담을 받으실 수 있습니다.\",\n      timestamp: new Date().toISOString()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const chatMutation = useMutation({\n    mutationFn: async ({ message, sessionId }: { message: string; sessionId?: string | null }) => {\n      return await apiRequest(\"/api/chat\", \"POST\", { \n        message, \n        sessionId,\n        riasecScores,\n        recommendedMajors\n      });\n    },\n    onSuccess: (data: { response: string; sessionId: string }) => {\n      setSessionId(data.sessionId);\n      setMessages(prev => [...prev, {\n        role: \"assistant\",\n        content: data.response,\n        timestamp: new Date().toISOString()\n      }]);\n    },\n    onError: () => {\n      toast({\n        title: \"오류가 발생했습니다\",\n        description: \"메시지 전송 중 문제가 발생했습니다. 다시 시도해주세요.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim() || chatMutation.isPending) return;\n\n    const userMessage: ChatMessage = {\n      role: \"user\",\n      content: inputMessage,\n      timestamp: new Date().toISOString()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    chatMutation.mutate({ message: inputMessage, sessionId });\n    setInputMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const quickQuestions = [\n    \"📚 전공별 커리큘럼이 궁금해요\",\n    \"💼 졸업 후 진로는 어떻게 되나요?\", \n    \"🎯 전공 선택할 때 고려사항은?\",\n    \"💰 전공별 취업 전망이 궁금해요\"\n  ];\n\n  const handleQuickQuestion = (question: string) => {\n    setInputMessage(question);\n  };\n\n  return (\n    <Card className={`overflow-hidden ${className}`}>\n      {/* Chat Header */}\n      <div className=\"bg-gradient-to-r from-primary to-secondary p-4\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center mr-3\">\n            <Bot className=\"text-white text-lg\" />\n          </div>\n          <div>\n            <h2 className=\"font-semibold text-white\">전공 상담 AI</h2>\n            <p className=\"text-white/80 text-sm flex items-center\">\n              <span className=\"inline-block w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse\"></span>\n              온라인\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Chat Messages */}\n      <div className=\"h-96 overflow-y-auto p-4 space-y-4 bg-neutral-50\">\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            className={`flex items-start space-x-3 ${\n              message.role === 'user' ? 'justify-end' : ''\n            } animate-slide-up`}\n          >\n            {message.role === 'assistant' && (\n              <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center flex-shrink-0\">\n                <Bot className=\"text-white text-sm\" />\n              </div>\n            )}\n            \n            <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${\n              message.role === 'user' \n                ? 'chat-bubble-user text-white'\n                : 'chat-bubble-bot text-neutral-800 border border-neutral-200'\n            }`}>\n              <p className=\"whitespace-pre-wrap text-sm leading-relaxed\">\n                {message.content}\n              </p>\n            </div>\n\n            {message.role === 'user' && (\n              <div className=\"w-8 h-8 bg-gradient-to-br from-accent to-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                <User className=\"text-white text-sm\" />\n              </div>\n            )}\n          </div>\n        ))}\n\n        {/* Typing Indicator */}\n        {chatMutation.isPending && (\n          <div className=\"flex items-start space-x-3 animate-slide-up\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"text-white text-sm\" />\n            </div>\n            <div className=\"chat-bubble-bot px-4 py-3 rounded-2xl border border-neutral-200\">\n              <div className=\"flex space-x-1\">\n                <div className=\"w-2 h-2 bg-neutral-400 rounded-full animate-bounce\"></div>\n                <div className=\"w-2 h-2 bg-neutral-400 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                <div className=\"w-2 h-2 bg-neutral-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Chat Input */}\n      <CardContent className=\"p-4 border-t border-neutral-200 bg-white\">\n        <div className=\"flex space-x-3\">\n          <Input\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"궁금한 것을 물어보세요...\"\n            className=\"flex-1\"\n            disabled={chatMutation.isPending}\n          />\n          <Button \n            onClick={handleSendMessage}\n            disabled={!inputMessage.trim() || chatMutation.isPending}\n            className=\"bg-primary hover:bg-primary/90\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Quick Questions */}\n        <div className=\"flex flex-wrap gap-2 mt-3\">\n          {quickQuestions.map((question, index) => (\n            <Badge \n              key={index}\n              variant=\"secondary\" \n              className=\"cursor-pointer hover:bg-neutral-200 transition-colors text-xs\"\n              onClick={() => handleQuickQuestion(question)}\n            >\n              {question}\n            </Badge>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7491},"client/src/components/floating-chat-button.tsx":{"content":"import { useState } from \"react\";\nimport { MessageCircle, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport function FloatingChatButton() {\n  const [isHovered, setIsHovered] = useState(false);\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <Link href=\"/chat\">\n        <Button\n          size=\"lg\"\n          className=\"w-14 h-14 rounded-full bg-primary hover:bg-primary/90 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110\"\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          <MessageCircle className=\"h-6 w-6\" />\n        </Button>\n      </Link>\n      \n      {/* Tooltip */}\n      {isHovered && (\n        <div className=\"absolute bottom-16 right-0 bg-neutral-800 text-white px-3 py-2 rounded-lg text-sm whitespace-nowrap shadow-lg\">\n          AI 전공 상담\n          <div className=\"absolute -bottom-1 right-4 w-2 h-2 bg-neutral-800 transform rotate-45\"></div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":1097},"client/src/components/major-recommendations.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { GraduationCap, TrendingUp } from \"lucide-react\";\n\ninterface MajorRecommendation {\n  major: string;\n  matchRate: number;\n  reason: string;\n}\n\ninterface MajorRecommendationsProps {\n  recommendations: MajorRecommendation[];\n  explanation: string;\n}\n\nconst majorInfo: Record<string, { icon: string; category: string }> = {\n  \"컴퓨터공학과\": { icon: \"💻\", category: \"공학\" },\n  \"소프트웨어학과\": { icon: \"⚡\", category: \"공학\" },\n  \"정보통계학과\": { icon: \"📊\", category: \"수리\" },\n  \"디지털미디어학과\": { icon: \"🎨\", category: \"융합\" },\n  \"산업공학과\": { icon: \"🏭\", category: \"공학\" },\n  \"건축학과\": { icon: \"🏗️\", category: \"설계\" },\n  \"도시계획학과\": { icon: \"🏙️\", category: \"계획\" },\n  \"환경공학과\": { icon: \"🌱\", category: \"환경\" },\n  \"신소재공학과\": { icon: \"🔬\", category: \"소재\" },\n  \"화학공학과\": { icon: \"⚗️\", category: \"화학\" }\n};\n\nexport default function MajorRecommendations({ \n  recommendations, \n  explanation \n}: MajorRecommendationsProps) {\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-neutral-900 mb-4 flex items-center\">\n            <GraduationCap className=\"mr-2 h-5 w-5 text-primary\" />\n            추천 전공\n          </h3>\n          <div className=\"space-y-3\">\n            {recommendations.map((rec, index) => {\n              const info = majorInfo[rec.major] || { icon: \"🎓\", category: \"기타\" };\n              return (\n                <div \n                  key={index} \n                  className=\"bg-neutral-50 rounded-xl p-4 border border-neutral-200 hover:border-primary/30 transition-colors\"\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-2xl\">{info.icon}</span>\n                      <div>\n                        <h4 className=\"font-semibold text-neutral-900\">{rec.major}</h4>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {info.category}\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"h-4 w-4 text-primary\" />\n                      <span className=\"bg-primary text-white px-3 py-1 rounded-full text-sm font-medium\">\n                        {rec.matchRate}% 매칭\n                      </span>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-neutral-600 leading-relaxed\">\n                    {rec.reason}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Explanation */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-neutral-900 mb-3 flex items-center\">\n            <span className=\"text-accent mr-2\">💡</span>\n            상세 분석\n          </h3>\n          <div className=\"prose prose-sm max-w-none\">\n            <p className=\"text-neutral-700 leading-relaxed whitespace-pre-wrap\">\n              {explanation}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3523},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { GraduationCap, Menu, User, LogOut, LogIn, UserPlus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const { user, isAuthenticated, logout, isLoggingOut } = useAuth();\n  const { toast } = useToast();\n\n  const navItems = [\n    { href: \"/assessment\", label: \"성향 진단\" },\n    { href: \"/chat\", label: \"AI 상담\" },\n    { href: \"/profile\", label: \"내 프로필\" },\n    { href: \"/riasec-info\", label: \"RIASEC이란?\" },\n    { href: \"/help\", label: \"도움말\" },\n  ];\n\n  return (\n    <header className=\"bg-white shadow-sm border-b-2 border-primary/10 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-2 sm:space-x-3\">\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center flex-shrink-0\">\n              <GraduationCap className=\"text-white text-sm sm:text-lg\" />\n            </div>\n            <div className=\"min-w-0\">\n              <h1 className=\"text-lg sm:text-xl font-bold text-neutral-900 truncate\">전공 알래말래</h1>\n              <p className=\"text-xs sm:text-sm text-neutral-600 truncate hidden sm:block\">창의융합학부 전공 매칭 시스템</p>\n            </div>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-6\">\n            <nav className=\"flex space-x-6\">\n              {navItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <Button \n                    variant=\"ghost\" \n                    className={`font-medium ${\n                      location === item.href \n                        ? \"text-primary\" \n                        : \"text-neutral-700 hover:text-primary\"\n                    }`}\n                  >\n                    {item.label}\n                  </Button>\n                </Link>\n              ))}\n            </nav>\n\n            {/* Auth Section */}\n            <div className=\"flex items-center space-x-4 border-l pl-6\">\n              <ThemeToggle />\n              {isAuthenticated ? (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <User className=\"h-4 w-4 text-neutral-600\" />\n                    <span className=\"text-sm font-medium text-neutral-700\">\n                      {user?.username}\n                    </span>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      logout();\n                      toast({\n                        title: \"로그아웃 완료\",\n                        description: \"안전하게 로그아웃되었습니다.\",\n                      });\n                    }}\n                    disabled={isLoggingOut}\n                  >\n                    <LogOut className=\"h-4 w-4 mr-1\" />\n                    {isLoggingOut ? \"로그아웃 중...\" : \"로그아웃\"}\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-2\">\n                  <Link href=\"/login\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <LogIn className=\"h-4 w-4 mr-1\" />\n                      로그인\n                    </Button>\n                  </Link>\n                  <Link href=\"/register\">\n                    <Button size=\"sm\">\n                      <UserPlus className=\"h-4 w-4 mr-1\" />\n                      회원가입\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <Sheet>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-64\">\n              <div className=\"flex flex-col space-y-4 mt-8\">\n                {/* User Info for Mobile */}\n                {isAuthenticated && (\n                  <div className=\"flex items-center space-x-2 p-3 bg-gray-50 rounded-lg\">\n                    <User className=\"h-4 w-4 text-neutral-600\" />\n                    <span className=\"text-sm font-medium text-neutral-700\">\n                      {user?.username}\n                    </span>\n                  </div>\n                )}\n\n                {/* Navigation Items */}\n                {navItems.map((item) => (\n                  <Link key={item.href} href={item.href}>\n                    <Button \n                      variant=\"ghost\" \n                      className={`w-full justify-start ${\n                        location === item.href \n                          ? \"text-primary bg-primary/10\" \n                          : \"text-neutral-700\"\n                      }`}\n                    >\n                      {item.label}\n                    </Button>\n                  </Link>\n                ))}\n\n                {/* Auth Buttons for Mobile */}\n                <div className=\"border-t pt-4 space-y-2\">\n                  {isAuthenticated ? (\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      onClick={() => {\n                        logout();\n                        toast({\n                          title: \"로그아웃 완료\",\n                          description: \"안전하게 로그아웃되었습니다.\",\n                        });\n                      }}\n                      disabled={isLoggingOut}\n                    >\n                      <LogOut className=\"h-4 w-4 mr-2\" />\n                      {isLoggingOut ? \"로그아웃 중...\" : \"로그아웃\"}\n                    </Button>\n                  ) : (\n                    <>\n                      <Link href=\"/login\">\n                        <Button variant=\"outline\" className=\"w-full justify-start\">\n                          <LogIn className=\"h-4 w-4 mr-2\" />\n                          로그인\n                        </Button>\n                      </Link>\n                      <Link href=\"/register\">\n                        <Button className=\"w-full justify-start\">\n                          <UserPlus className=\"h-4 w-4 mr-2\" />\n                          회원가입\n                        </Button>\n                      </Link>\n                    </>\n                  )}\n                </div>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":7107},"client/src/components/riasec-chart.tsx":{"content":"import { Radar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n  Tooltip,\n  Legend\n);\n\ninterface RIASECChartProps {\n  riasecScores: {\n    realistic: number;\n    investigative: number;\n    artistic: number;\n    social: number;\n    enterprising: number;\n    conventional: number;\n  };\n  className?: string;\n}\n\nexport default function RIASECChart({ riasecScores, className = \"\" }: RIASECChartProps) {\n  const data = {\n    labels: [\n      'Realistic (실용적)',\n      'Investigative (탐구적)',\n      'Artistic (예술적)',\n      'Social (사회적)',\n      'Enterprising (진취적)',\n      'Conventional (관습적)'\n    ],\n    datasets: [\n      {\n        label: 'RIASEC 성향',\n        data: [\n          riasecScores.realistic,\n          riasecScores.investigative,\n          riasecScores.artistic,\n          riasecScores.social,\n          riasecScores.enterprising,\n          riasecScores.conventional\n        ],\n        backgroundColor: 'rgba(59, 130, 246, 0.2)',\n        borderColor: 'rgba(59, 130, 246, 1)',\n        borderWidth: 3,\n        pointBackgroundColor: 'rgba(59, 130, 246, 1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(59, 130, 246, 1)',\n        pointRadius: 8,\n        pointHoverRadius: 12,\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      r: {\n        beginAtZero: true,\n        max: 100,\n        pointLabels: {\n          font: {\n            size: 16,\n            weight: 'bold'\n          },\n          color: '#374151'\n        },\n        ticks: {\n          stepSize: 20,\n          font: {\n            size: 14\n          },\n          color: '#6B7280'\n        },\n        grid: {\n          color: '#E5E7EB'\n        },\n        angleLines: {\n          color: '#E5E7EB'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context: any) {\n            return `${context.label}: ${context.raw}점`;\n          }\n        }\n      }\n    },\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      <Radar data={data} options={options} />\n    </div>\n  );\n}","size_bytes":2404},"client/src/data/majors.ts":{"content":"export interface Major {\n  id: string;\n  name: string;\n  description: string;\n  riasecTypes: string[];\n  careers: string[];\n  curriculum: string[];\n}\n\nexport const majors: Major[] = [\n  {\n    id: \"computer-science\",\n    name: \"컴퓨터공학과\",\n    description: \"소프트웨어 개발, 알고리즘 설계, 시스템 구축 등 컴퓨터 과학의 전반적인 분야를 다룹니다.\",\n    riasecTypes: [\"I\", \"R\"],\n    careers: [\"소프트웨어 개발자\", \"시스템 엔지니어\", \"데이터 사이언티스트\", \"AI 연구원\"],\n    curriculum: [\"프로그래밍\", \"자료구조\", \"알고리즘\", \"데이터베이스\", \"인공지능\"]\n  },\n  {\n    id: \"software\",\n    name: \"소프트웨어학과\", \n    description: \"소프트웨어 설계, 개발, 유지보수에 특화된 실무 중심의 교육을 제공합니다.\",\n    riasecTypes: [\"I\", \"R\", \"A\"],\n    careers: [\"웹 개발자\", \"모바일 앱 개발자\", \"게임 개발자\", \"소프트웨어 아키텍트\"],\n    curriculum: [\"웹 프로그래밍\", \"모바일 개발\", \"소프트웨어 공학\", \"UI/UX 디자인\"]\n  },\n  {\n    id: \"statistics\",\n    name: \"정보통계학과\",\n    description: \"빅데이터 분석, 통계적 추론, 데이터 마이닝 등 데이터 과학 분야를 전문으로 합니다.\",\n    riasecTypes: [\"I\", \"C\"],\n    careers: [\"데이터 분석가\", \"통계학자\", \"시장조사원\", \"리스크 매니저\"],\n    curriculum: [\"통계학\", \"데이터 마이닝\", \"머신러닝\", \"빅데이터 분석\", \"R/Python\"]\n  },\n  {\n    id: \"digital-media\",\n    name: \"디지털미디어학과\",\n    description: \"디지털 콘텐츠 제작, 멀티미디어 기술, 인터랙티브 미디어 등을 다룹니다.\",\n    riasecTypes: [\"A\", \"I\", \"E\"],\n    careers: [\"게임 디자이너\", \"웹 디자이너\", \"영상 편집자\", \"UX/UI 디자이너\"],\n    curriculum: [\"디지털 아트\", \"3D 모델링\", \"게임 디자인\", \"영상 제작\", \"인터랙션 디자인\"]\n  },\n  {\n    id: \"industrial-engineering\",\n    name: \"산업공학과\",\n    description: \"생산성 향상, 품질 관리, 시스템 최적화 등 산업 시스템을 효율적으로 설계합니다.\",\n    riasecTypes: [\"E\", \"I\", \"C\"],\n    careers: [\"생산관리자\", \"품질관리자\", \"경영컨설턴트\", \"프로젝트 매니저\"],\n    curriculum: [\"경영과학\", \"품질관리\", \"생산계획\", \"물류관리\", \"시스템 분석\"]\n  },\n  {\n    id: \"architecture\",\n    name: \"건축학과\",\n    description: \"건축 설계, 도시 계획, 공간 디자인 등 건축 전반의 이론과 실무를 학습합니다.\",\n    riasecTypes: [\"A\", \"R\", \"E\"],\n    careers: [\"건축사\", \"건축 설계사\", \"인테리어 디자이너\", \"도시계획가\"],\n    curriculum: [\"건축 설계\", \"구조역학\", \"건축사\", \"도시계획\", \"건축 재료\"]\n  },\n  {\n    id: \"urban-planning\",\n    name: \"도시계획학과\", \n    description: \"도시 개발, 지역 계획, 교통 계획 등 도시 환경의 체계적 계획을 다룹니다.\",\n    riasecTypes: [\"S\", \"E\", \"I\"],\n    careers: [\"도시계획가\", \"교통계획가\", \"지역개발 전문가\", \"환경계획가\"],\n    curriculum: [\"도시설계\", \"교통계획\", \"환경계획\", \"GIS\", \"지역개발론\"]\n  },\n  {\n    id: \"environmental-engineering\",\n    name: \"환경공학과\",\n    description: \"환경 보호, 오염 방지, 지속가능한 개발 등 환경 문제 해결을 위한 공학을 학습합니다.\",\n    riasecTypes: [\"I\", \"S\", \"R\"],\n    careers: [\"환경 엔지니어\", \"환경 컨설턴트\", \"환경 연구원\", \"환경영향평가사\"],\n    curriculum: [\"환경화학\", \"수처리공학\", \"대기오염제어\", \"폐기물처리\", \"환경영향평가\"]\n  },\n  {\n    id: \"materials-science\",\n    name: \"신소재공학과\",\n    description: \"첨단 소재 개발, 나노 기술, 재료 특성 분석 등 신소재 분야를 연구합니다.\",\n    riasecTypes: [\"I\", \"R\"],\n    careers: [\"소재 연구원\", \"품질관리자\", \"기술개발자\", \"소재 엔지니어\"],\n    curriculum: [\"재료과학\", \"나노기술\", \"세라믹공학\", \"금속공학\", \"복합재료\"]\n  },\n  {\n    id: \"chemical-engineering\",\n    name: \"화학공학과\",\n    description: \"화학 반응, 공정 설계, 제품 개발 등 화학 공업의 이론과 응용을 다룹니다.\",\n    riasecTypes: [\"I\", \"R\", \"C\"],\n    careers: [\"화학 엔지니어\", \"공정 엔지니어\", \"연구개발자\", \"품질관리자\"],\n    curriculum: [\"화학공학\", \"반응공학\", \"분리공정\", \"공정제어\", \"화학공정설계\"]\n  }\n];\n","size_bytes":4517},"client/src/data/questions.ts":{"content":"export interface AssessmentQuestion {\n  id: number;\n  text: string;\n  type: 'R' | 'I' | 'A' | 'S' | 'E' | 'C';\n}\n\nexport const assessmentQuestions: AssessmentQuestion[] = [\n  // Realistic (R) - 실용적\n  { id: 1, text: \"기계나 도구를 다루는 작업에 흥미를 느끼시나요?\", type: \"R\" },\n  { id: 2, text: \"손으로 무언가를 만들거나 조립하는 것을 좋아하시나요?\", type: \"R\" },\n  { id: 3, text: \"야외에서 활동하는 것을 선호하시나요?\", type: \"R\" },\n  \n  // Investigative (I) - 탐구적\n  { id: 4, text: \"복잡한 문제를 논리적으로 분석하는 것을 즐기시나요?\", type: \"I\" },\n  { id: 5, text: \"새로운 지식을 탐구하고 연구하는 것에 흥미가 있으신가요?\", type: \"I\" },\n  { id: 6, text: \"과학이나 수학 관련 과목을 좋아하시나요?\", type: \"I\" },\n  \n  // Artistic (A) - 예술적\n  { id: 7, text: \"창작 활동이나 예술적 표현을 즐기시나요?\", type: \"A\" },\n  { id: 8, text: \"독창적이고 새로운 아이디어를 생각해내는 것을 좋아하시나요?\", type: \"A\" },\n  { id: 9, text: \"미술, 음악, 문학 등 예술 분야에 관심이 있으신가요?\", type: \"A\" },\n  \n  // Social (S) - 사회적\n  { id: 10, text: \"다른 사람들을 도와주는 일에 보람을 느끼시나요?\", type: \"S\" },\n  { id: 11, text: \"사람들과 대화하고 교류하는 것을 즐기시나요?\", type: \"S\" },\n  { id: 12, text: \"팀워크를 중시하고 협업을 선호하시나요?\", type: \"S\" },\n  \n  // Enterprising (E) - 진취적\n  { id: 13, text: \"리더십을 발휘하고 다른 사람들을 이끄는 것을 좋아하시나요?\", type: \"E\" },\n  { id: 14, text: \"경쟁적인 환경에서 성과를 내는 것에 자신이 있으신가요?\", type: \"E\" },\n  { id: 15, text: \"사업이나 경영 분야에 관심이 있으신가요?\", type: \"E\" },\n  \n  // Conventional (C) - 관습적\n  { id: 16, text: \"체계적이고 규칙적인 업무를 선호하시나요?\", type: \"C\" },\n  { id: 17, text: \"정확성과 세부사항을 중시하시나요?\", type: \"C\" },\n  { id: 18, text: \"안정적이고 예측 가능한 환경을 선호하시나요?\", type: \"C\" }\n];\n\nexport const answerOptions = [\n  { value: 5, label: \"매우 그렇다\" },\n  { value: 4, label: \"그렇다\" },\n  { value: 3, label: \"보통이다\" },\n  { value: 2, label: \"그렇지 않다\" },\n  { value: 1, label: \"전혀 그렇지 않다\" }\n];\n","size_bytes":2423},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      try {\n        const data = await apiRequest(\"/api/auth/user\");\n        return data.user as User;\n      } catch (error: any) {\n        if (error.message?.includes(\"401\")) {\n          return null; // Not authenticated\n        }\n        throw error;\n      }\n    },\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"/api/auth/logout\", \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/user\"], null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n    logout: logoutMutation.mutate,\n    isLoggingOut: logoutMutation.isPending,\n  };\n}","size_bytes":1148},"client/src/lib/openai.ts":{"content":"// OpenAI integration utilities for RIASEC assessment system\n// This file contains helper functions for formatting prompts and processing responses\n\nexport interface RIASECAnalysisRequest {\n  responses: Record<number, number>;\n}\n\nexport interface RIASECAnalysisResponse {\n  realistic: number;\n  investigative: number;\n  artistic: number;\n  social: number;\n  enterprising: number;\n  conventional: number;\n}\n\nexport interface MajorRecommendationRequest {\n  riasecScores: RIASECAnalysisResponse;\n}\n\nexport interface MajorRecommendationResponse {\n  recommendations: Array<{\n    major: string;\n    matchRate: number;\n    reason: string;\n  }>;\n  explanation: string;\n}\n\n// Format RIASEC analysis prompt for OpenAI\nexport function formatRIASECPrompt(responses: Record<number, number>): string {\n  return `다음은 사용자의 RIASEC 성향 진단 응답입니다. 각 질문에 대한 답변(1-5 척도)을 분석하여 RIASEC 6개 유형별 점수를 0-1 사이의 값으로 정확히 계산해주세요.\n\n응답 데이터: ${JSON.stringify(responses)}\n\nRIASEC 유형별 특성:\n- R (Realistic): 실용적, 기계나 도구 다루기 선호, 손으로 만드는 작업 좋아함\n- I (Investigative): 탐구적, 분석과 연구 선호, 논리적 사고와 문제해결 중시\n- A (Artistic): 예술적, 창의적 표현 선호, 독창적이고 자유로운 환경 추구\n- S (Social): 사회적, 사람들과의 교류 선호, 협력과 도움 주기를 중시\n- E (Enterprising): 진취적, 리더십과 경영 선호, 경쟁적 환경에서 성과 추구\n- C (Conventional): 관습적, 체계적이고 규칙적인 업무 선호, 안정성과 정확성 중시\n\n점수 계산 시 고려사항:\n- 각 응답의 점수(1-5)를 해당 유형의 강도로 반영\n- 총합이 1.0이 되도록 정규화하지 말고, 각 유형별로 독립적으로 0-1 사이 값으로 계산\n- 높은 점수(4-5)는 해당 유형에 대한 강한 선호를 의미\n- 낮은 점수(1-2)는 해당 유형에 대한 약한 관심을 의미\n\nJSON 형식으로만 응답해주세요:`;\n}\n\n// Format major recommendation prompt for OpenAI\nexport function formatMajorRecommendationPrompt(riasecScores: RIASECAnalysisResponse): string {\n  return `다음 RIASEC 성향 분석 결과를 바탕으로 충남대학교 창의융합대학의 전공을 추천해주세요.\n\nRIASEC 점수: ${JSON.stringify(riasecScores)}\n\n충남대학교 정보:\n- 창의융합대학: 2025년 신설 독립 단과대학, 전공자율선택제 운영 (1학년 전공 탐색 후 2학년 진학시 64개 전공 선택)\n- 컴퓨터융합학부: 공과대학 소속, 기존 컴퓨터공학과에서 명칭 변경, AI·빅데이터·SW·정보보호 교육\n- 주요 진출기업: 삼성전자, LG전자, 네이버, SK텔레콤, KT 등\n\n충남대학교 전공 목록과 특성:\n- 컴퓨터융합학부: AI, 소프트웨어, 데이터과학, 정보보호, IoT (I, R 중심)\n- 감성인지소프트웨어전공: 심리학+컴퓨터공학 융합, UX 연구 (A, I, S 중심)\n- 정보통계학과: 빅데이터 분석, 통계적 추론 (I, C 중심)\n- 산업공학과: 생산관리, 품질관리, 시스템 최적화 (E, I, C 중심)\n- 건축학과: 건축 설계, 공간 디자인 (A, R, E 중심)\n- 심리학과: 인간 행동 연구, 상담 (S, I 중심)\n- 경영학과: 경영전략, 마케팅, 리더십 (E, S, C 중심)\n- 디자인학과: 시각디자인, 산업디자인 (A, E 중심)\n\n추천 기준:\n- 사용자의 가장 높은 RIASEC 점수 2-3개를 중심으로 분석\n- 각 전공의 핵심 RIASEC 유형과의 매칭도 계산\n- 충남대학교 특색 교육과정과 진출 현황 고려\n- 매칭률은 퍼센트로 표시 (70% 이상만 추천)\n- 추천 이유는 충남대 전공의 특징과 함께 구체적이고 개인화된 설명 제공\n\nChain-of-Thought 방식으로 분석한 후 JSON 형식으로 응답해주세요:`;\n}\n\n// Parse and validate RIASEC scores from OpenAI response\nexport function parseRIASECResponse(response: string): RIASECAnalysisResponse {\n  try {\n    const parsed = JSON.parse(response);\n    \n    // Validate that all required fields exist and are numbers between 0-1\n    const requiredFields = ['realistic', 'investigative', 'artistic', 'social', 'enterprising', 'conventional'];\n    for (const field of requiredFields) {\n      if (!(field in parsed) || typeof parsed[field] !== 'number' || parsed[field] < 0 || parsed[field] > 1) {\n        throw new Error(`Invalid ${field} score`);\n      }\n    }\n    \n    return parsed as RIASECAnalysisResponse;\n  } catch (error) {\n    throw new Error('Invalid RIASEC response format');\n  }\n}\n\n// Parse and validate major recommendations from OpenAI response\nexport function parseMajorRecommendationResponse(response: string): MajorRecommendationResponse {\n  try {\n    const parsed = JSON.parse(response);\n    \n    if (!parsed.recommendations || !Array.isArray(parsed.recommendations)) {\n      throw new Error('Invalid recommendations format');\n    }\n    \n    if (!parsed.explanation || typeof parsed.explanation !== 'string') {\n      throw new Error('Invalid explanation format');\n    }\n    \n    // Validate each recommendation\n    for (const rec of parsed.recommendations) {\n      if (!rec.major || !rec.reason || typeof rec.matchRate !== 'number') {\n        throw new Error('Invalid recommendation format');\n      }\n    }\n    \n    return parsed as MajorRecommendationResponse;\n  } catch (error) {\n    throw new Error('Invalid major recommendation response format');\n  }\n}\n\n// Generate contextual chat prompt\nexport function formatChatPrompt(\n  message: string, \n  riasecScores?: RIASECAnalysisResponse | null,\n  recommendedMajors?: string[] | null\n): string {\n  let context = \"당신은 충남대학교 창의융합학부 전공 상담 AI입니다.\\n\";\n  context += \"학생들의 전공 선택을 도와주며, 친근하고 전문적인 조언을 제공해주세요.\\n\\n\";\n  \n  if (riasecScores) {\n    context += `학생의 RIASEC 성향 분석 결과:\\n${JSON.stringify(riasecScores, null, 2)}\\n\\n`;\n  }\n  \n  if (recommendedMajors && recommendedMajors.length > 0) {\n    context += `추천된 전공: ${recommendedMajors.join(', ')}\\n\\n`;\n  }\n  \n  context += \"이 정보를 바탕으로 학생의 질문에 맞춤형 답변을 제공해주세요.\\n\";\n  context += \"답변은 한국어로, 대학생에게 적합한 톤으로 작성해주세요.\\n\\n\";\n  context += `학생 질문: ${message}`;\n  \n  return context;\n}\n\n// Quality check for AI responses\nexport function validateAIResponse(response: string): boolean {\n  if (!response || response.trim().length < 10) {\n    return false;\n  }\n  \n  // Check for Korean content (basic validation)\n  const koreanRegex = /[가-힣]/;\n  if (!koreanRegex.test(response)) {\n    return false;\n  }\n  \n  return true;\n}\n","size_bytes":6772},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string = \"GET\",\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1399},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/assessment.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AnalysisLoading } from \"@/components/analysis-loading\";\nimport { ChevronLeft, ChevronRight, FileCheck, Play } from \"lucide-react\";\nimport { assessmentQuestions, answerOptions } from \"@/data/questions\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { RIASECScores } from \"@shared/schema\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\n\nfunction AssessmentContent() {\n  const [, setLocation] = useLocation();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [responses, setResponses] = useState<Record<number, number>>({});\n  const [hasExistingResults, setHasExistingResults] = useState(false);\n  const [showExistingForm, setShowExistingForm] = useState(false);\n  const [existingScores, setExistingScores] = useState({\n    realistic: '',\n    investigative: '',\n    artistic: '',\n    social: '',\n    enterprising: '',\n    conventional: ''\n  });\n  const [maxScore, setMaxScore] = useState(100);\n  const { toast } = useToast();\n\n  const analyzeRiasecMutation = useMutation({\n    mutationFn: async (responses: Record<number, number>) => {\n      return await apiRequest(\"/api/analyze-riasec\", \"POST\", { responses });\n    },\n    onSuccess: (data: { assessmentId: string; riasecScores: RIASECScores; recommendations: any[]; explanation: string; similarCasesFeedback?: string }) => {\n      setLocation(`/results/${data.assessmentId}`);\n      toast({\n        title: \"진단 완료!\",\n        description: \"RIASEC 성향 분석이 완료되었습니다. 결과를 확인해보세요.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"오류가 발생했습니다\",\n        description: \"진단 분석 중 문제가 발생했습니다. 다시 시도해주세요.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const submitExistingScoresMutation = useMutation({\n    mutationFn: async (riasecScores: RIASECScores) => {\n      // riasecScores already in 0-100 range from user input\n      console.log(\"Submitting existing scores:\", riasecScores);\n      const majorData = await apiRequest(\"/api/recommend-majors\", \"POST\", { riasecScores });\n\n      const assessment = await apiRequest(\"/api/assessments\", \"POST\", {\n        responses: {},\n        riasecScores,\n        recommendedMajors: majorData.recommendations.map((r: any) => r.major),\n        explanation: majorData.explanation\n      });\n      return assessment;\n    },\n    onSuccess: (assessment: { id: string }) => {\n      setLocation(`/results/${assessment.id}`);\n      toast({\n        title: \"분석 완료!\",\n        description: \"기존 RIASEC 점수를 바탕으로 전공 추천이 완료되었습니다.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"오류가 발생했습니다\",\n        description: \"전공 추천 중 문제가 발생했습니다. 다시 시도해주세요.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const progress = ((currentQuestion + 1) / assessmentQuestions.length) * 100;\n  const question = assessmentQuestions[currentQuestion];\n\n  const handleAnswerChange = (value: string) => {\n    setResponses(prev => ({\n      ...prev,\n      [question.id]: parseInt(value)\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentQuestion < assessmentQuestions.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n    } else {\n      analyzeRiasecMutation.mutate(responses);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(prev => prev - 1);\n    }\n  };\n\n  const handleExistingScoreChange = (type: keyof typeof existingScores, value: string) => {\n    setExistingScores(prev => ({\n      ...prev,\n      [type]: value\n    }));\n  };\n\n  const normalizeScores = () => {\n    const normalized = {};\n    Object.entries(existingScores).forEach(([key, value]) => {\n      const numValue = parseFloat(value as string) || 0;\n      // Convert from maxScore scale to 100-point scale\n      normalized[key] = Math.round((numValue / maxScore) * 100);\n    });\n    return normalized;\n  };\n\n  const handleSubmitExistingScores = () => {\n    const normalizedScores = normalizeScores();\n    const riasecScores: RIASECScores = {\n      realistic: normalizedScores.realistic,\n      investigative: normalizedScores.investigative,\n      artistic: normalizedScores.artistic,\n      social: normalizedScores.social,\n      enterprising: normalizedScores.enterprising,\n      conventional: normalizedScores.conventional\n    };\n\n    console.log(\"Submitting normalized scores (0-100 range):\", riasecScores);\n    submitExistingScoresMutation.mutate(riasecScores);\n  };\n\n  const canProceed = responses[question.id] !== undefined;\n  const isLastQuestion = currentQuestion === assessmentQuestions.length - 1;\n  const canSubmitExisting = Object.values(existingScores).some(score => parseFloat(score as string) > 0);\n\n  if (showExistingForm) {\n    return (\n      <div className=\"min-h-screen py-16 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl font-bold text-neutral-900 mb-4\">기존 RIASEC 점수 입력</h1>\n            <p className=\"text-lg text-neutral-600\">이미 받은 RIASEC 점수를 입력해주세요</p>\n          </div>\n\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileCheck className=\"h-5 w-5\" />\n                RIASEC 점수 입력\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* 만점 기준 설정 */}\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <Label htmlFor=\"maxScore\" className=\"text-sm font-medium text-blue-900\">\n                  각 항목의 만점은 몇 점인가요?\n                </Label>\n                <div className=\"mt-2 flex items-center gap-2\">\n                  <Input\n                    id=\"maxScore\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"1000\"\n                    value={maxScore}\n                    onChange={(e) => setMaxScore(parseInt(e.target.value) || 100)}\n                    className=\"w-24\"\n                  />\n                  <span className=\"text-sm text-blue-700\">점 (기본: 100점)</span>\n                </div>\n                <p className=\"text-xs text-blue-600 mt-1\">\n                  입력하신 점수는 자동으로 100점 기준으로 변환됩니다\n                </p>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"realistic\">현실형 (Realistic)</Label>\n                  <Input\n                    id=\"realistic\"\n                    type=\"number\"\n                    min=\"0\"\n                    max={maxScore}\n                    value={existingScores.realistic}\n                    onChange={(e) => handleExistingScoreChange('realistic', e.target.value)}\n                    placeholder={`0-${maxScore}점`}\n                  />\n                  <p className=\"text-sm text-neutral-600\">실용적이고 현실적인 성향</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"investigative\">탐구형 (Investigative)</Label>\n                  <Input\n                    id=\"investigative\"\n                    type=\"number\"\n                    min=\"0\"\n                    max={maxScore}\n                    value={existingScores.investigative}\n                    onChange={(e) => handleExistingScoreChange('investigative', e.target.value)}\n                    placeholder={`0-${maxScore}점`}\n                  />\n                  <p className=\"text-sm text-neutral-600\">분석적이고 연구지향적 성향</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"artistic\">예술형 (Artistic)</Label>\n                  <Input\n                    id=\"artistic\"\n                    type=\"number\"\n                    min=\"0\"\n                    max={maxScore}\n                    value={existingScores.artistic}\n                    onChange={(e) => handleExistingScoreChange('artistic', e.target.value)}\n                    placeholder={`0-${maxScore}점`}\n                  />\n                  <p className=\"text-sm text-neutral-600\">창의적이고 예술적 성향</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"social\">사회형 (Social)</Label>\n                  <Input\n                    id=\"social\"\n                    type=\"number\"\n                    min=\"0\"\n                    max={maxScore}\n                    value={existingScores.social}\n                    onChange={(e) => handleExistingScoreChange('social', e.target.value)}\n                    placeholder={`0-${maxScore}점`}\n                  />\n                  <p className=\"text-sm text-neutral-600\">사교적이고 도움을 주는 성향</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"enterprising\">진취형 (Enterprising)</Label>\n                  <Input\n                    id=\"enterprising\"\n                    type=\"number\"\n                    min=\"0\"\n                    max={maxScore}\n                    value={existingScores.enterprising}\n                    onChange={(e) => handleExistingScoreChange('enterprising', e.target.value)}\n                    placeholder={`0-${maxScore}점`}\n                  />\n                  <p className=\"text-sm text-neutral-600\">리더십과 설득력을 가진 성향</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"conventional\">관습형 (Conventional)</Label>\n                  <Input\n                    id=\"conventional\"\n                    type=\"number\"\n                    min=\"0\"\n                    max={maxScore}\n                    value={existingScores.conventional}\n                    onChange={(e) => handleExistingScoreChange('conventional', e.target.value)}\n                    placeholder={`0-${maxScore}점`}\n                  />\n                  <p className=\"text-sm text-neutral-600\">체계적이고 논리적 성향</p>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between pt-6\">\n                <Button \n                  variant=\"ghost\" \n                  onClick={() => setShowExistingForm(false)}\n                >\n                  <ChevronLeft className=\"mr-2 h-4 w-4\" />\n                  뒤로가기\n                </Button>\n                \n                <Button \n                  onClick={handleSubmitExistingScores}\n                  disabled={!canSubmitExisting || submitExistingScoresMutation.isPending}\n                  className=\"bg-primary hover:bg-primary/90 text-white\"\n                >\n                  {submitExistingScoresMutation.isPending ? (\n                    \"AI 분석 중...\"\n                  ) : (\n                    <>\n                      AI 전공 추천 받기\n                      <ChevronRight className=\"ml-2 h-4 w-4\" />\n                    </>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-16 bg-white\">\n      {/* Analysis Loading Overlay */}\n      <AnalysisLoading \n        isVisible={analyzeRiasecMutation.isPending || submitExistingScoresMutation.isPending} \n        type={analyzeRiasecMutation.isPending ? \"assessment\" : \"recommendation\"} \n      />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl font-bold text-neutral-900 mb-4\">RIASEC 성향 진단</h1>\n          <p className=\"text-lg text-neutral-600\">간단한 질문들을 통해 당신의 성향을 파악해보세요</p>\n        </div>\n\n        {/* 기존 결과 있음/없음 선택 */}\n        {currentQuestion === 0 && !hasExistingResults && (\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-neutral-900 mb-2\">\n                  이미 RIASEC 결과를 받아보신 적이 있나요?\n                </h2>\n                <p className=\"text-neutral-600\">\n                  기존 점수가 있다면 직접 입력하여 시간을 절약할 수 있습니다.\n                </p>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button \n                  onClick={() => {\n                    setHasExistingResults(true);\n                    setShowExistingForm(true);\n                  }}\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"flex items-center gap-2\"\n                >\n                  <FileCheck className=\"h-5 w-5\" />\n                  네, 기존 점수 입력하기\n                </Button>\n                \n                <Button \n                  onClick={() => {\n                    setHasExistingResults(true);\n                    setCurrentQuestion(0);\n                  }}\n                  size=\"lg\"\n                  className=\"flex items-center gap-2 bg-primary hover:bg-primary/90\"\n                >\n                  <Play className=\"h-5 w-5\" />\n                  아니요, 새로 진단받기\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {hasExistingResults && !showExistingForm && (\n          <>\n            {/* Progress Bar */}\n            <div className=\"mb-8\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-neutral-700\">진행률</span>\n                <span className=\"text-sm font-medium text-primary\">\n                  {currentQuestion + 1}/{assessmentQuestions.length}\n                </span>\n              </div>\n              <Progress value={progress} className=\"w-full h-2\" />\n            </div>\n\n            {/* Question Card */}\n            <Card className=\"mb-8 animate-slide-up\">\n              <CardContent className=\"p-8\">\n                <div className=\"mb-6\">\n                  <span className=\"inline-block bg-primary/10 text-primary px-3 py-1 rounded-full text-sm font-medium mb-4\">\n                    질문 {currentQuestion + 1}\n                  </span>\n                  <h2 className=\"text-xl font-semibold text-neutral-900 mb-3\">\n                    {question.text}\n                  </h2>\n                  <p className=\"text-neutral-600\">\n                    자신의 성향과 가장 가까운 답변을 선택해주세요.\n                  </p>\n                </div>\n\n                {/* Answer Options */}\n                <RadioGroup \n                  value={responses[question.id]?.toString() || \"\"} \n                  onValueChange={handleAnswerChange}\n                  className=\"space-y-3\"\n                >\n                  {answerOptions.map((option) => {\n                    const isSelected = responses[question.id] === option.value;\n                    return (\n                      <div key={option.value} className=\"relative\">\n                        <RadioGroupItem \n                          value={option.value.toString()} \n                          id={`option-${option.value}`}\n                          className=\"sr-only\"\n                        />\n                        <Label \n                          htmlFor={`option-${option.value}`}\n                          className={`flex items-center space-x-4 cursor-pointer p-5 rounded-xl border-2 transition-all ${\n                            isSelected \n                              ? 'border-blue-500 bg-blue-100 shadow-md' \n                              : 'border-neutral-200 hover:border-blue-400 hover:bg-blue-50'\n                          }`}\n                        >\n                          <div className={`w-5 h-5 rounded-full border-2 transition-all flex items-center justify-center ${\n                            isSelected \n                              ? 'border-blue-500 bg-blue-500' \n                              : 'border-neutral-400'\n                          }`}>\n                            {isSelected && (\n                              <div className=\"w-2 h-2 rounded-full bg-white\"></div>\n                            )}\n                          </div>\n                          <span className={`font-medium flex-1 ${\n                            isSelected ? 'text-blue-800' : 'text-neutral-800'\n                          }`}>\n                            {option.label}\n                          </span>\n                        </Label>\n                      </div>\n                    );\n                  })}\n                </RadioGroup>\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between mt-8\">\n                  <Button \n                    variant=\"ghost\" \n                    onClick={handlePrevious}\n                    disabled={currentQuestion === 0}\n                    className=\"text-neutral-600 hover:text-neutral-800\"\n                  >\n                    <ChevronLeft className=\"mr-2 h-4 w-4\" />\n                    이전\n                  </Button>\n                  <Button \n                    onClick={handleNext}\n                    disabled={!canProceed || analyzeRiasecMutation.isPending}\n                    className=\"bg-primary hover:bg-primary/90 text-white\"\n                  >\n                    {analyzeRiasecMutation.isPending ? (\n                      \"AI 분석 중...\"\n                    ) : isLastQuestion ? (\n                      <>\n                        AI 진단 시작\n                        <ChevronRight className=\"ml-2 h-4 w-4\" />\n                      </>\n                    ) : (\n                      <>\n                        다음\n                        <ChevronRight className=\"ml-2 h-4 w-4\" />\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function Assessment() {\n  return (\n    <ProtectedRoute>\n      <AssessmentContent />\n    </ProtectedRoute>\n  );\n}","size_bytes":19081},"client/src/pages/chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, Bot, User, Brain, Clock, GraduationCap } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ChatMessage } from \"@shared/schema\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\n\nfunction ChatContent() {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      role: \"assistant\",\n      content: \"안녕하세요! 저는 충남대학교 창의융합대학 전공 상담을 도와드리는 김상담입니다. 전공 선택이나 진로 고민이 있으시면 편하게 말씀해 주세요. 어떤 것이 가장 궁금하신가요?\",\n      timestamp: new Date().toISOString()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const chatMutation = useMutation({\n    mutationFn: async ({ message, sessionId }: { message: string; sessionId?: string | null }) => {\n      return await apiRequest(\"/api/chat\", \"POST\", { \n        message, \n        sessionId,\n        riasecScores: null, // TODO: Get from assessment if available\n        recommendedMajors: null\n      });\n    },\n    onSuccess: (data: { response: string; sessionId: string }) => {\n      setSessionId(data.sessionId);\n      setMessages(prev => [...prev, {\n        role: \"assistant\",\n        content: data.response,\n        timestamp: new Date().toISOString()\n      }]);\n    },\n    onError: (error: any) => {\n      console.error(\"Chat error:\", error);\n      toast({\n        title: \"오류가 발생했습니다\",\n        description: error.message || \"메시지 전송 중 문제가 발생했습니다. 다시 시도해주세요.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim() || chatMutation.isPending) return;\n\n    const userMessage: ChatMessage = {\n      role: \"user\",\n      content: inputMessage,\n      timestamp: new Date().toISOString()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    chatMutation.mutate({ message: inputMessage, sessionId });\n    setInputMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const quickQuestions = [\n    \"전공별 커리큘럼이 궁금해요\",\n    \"졸업 후 진로는 어떻게 되나요?\", \n    \"어떤 분야에서 일하고 싶은지 고민이에요\",\n    \"평소에 관심 있던 기술이 있어요\",\n    \"대학 생활에서 뭘 해야 할지 모르겠어요\",\n    \"취업 준비는 언제부터 해야 하나요?\",\n    \"창업에 관심이 있어요\",\n    \"대학원 진학을 고려하고 있어요\"\n  ];\n\n  const handleQuickQuestion = (question: string) => {\n    setInputMessage(question);\n  };\n\n  return (\n    <div className=\"min-h-screen py-16 bg-white\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl font-bold text-neutral-900 mb-4\">AI 전공 상담 챗봇</h1>\n          <p className=\"text-lg text-neutral-600\">궁금한 점이 있으시면 언제든지 물어보세요</p>\n        </div>\n\n        {/* Chat Interface */}\n        <Card className=\"overflow-hidden\">\n          {/* Chat Header */}\n          <div className=\"bg-gradient-to-r from-primary to-secondary p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center mr-3\">\n                <Bot className=\"text-white text-lg\" />\n              </div>\n              <div>\n                <h2 className=\"font-semibold text-white\">김상담 (전공 상담사)</h2>\n                <p className=\"text-white/80 text-sm flex items-center\">\n                  <span className=\"inline-block w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse\"></span>\n                  상담 가능\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Messages */}\n          <div className=\"h-96 overflow-y-auto p-4 space-y-4 bg-neutral-50\">\n            {messages.map((message, index) => (\n              <div \n                key={index} \n                className={`flex items-start space-x-3 ${\n                  message.role === 'user' ? 'justify-end' : ''\n                } animate-slide-up`}\n              >\n                {message.role === 'assistant' && (\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"text-white text-sm\" />\n                  </div>\n                )}\n                \n                <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${\n                  message.role === 'user' \n                    ? 'bg-gradient-to-r from-primary to-secondary text-white'\n                    : 'bg-white border border-neutral-200 text-neutral-800'\n                }`}>\n                  <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                </div>\n\n                {message.role === 'user' && (\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-accent to-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                    <User className=\"text-white text-sm\" />\n                  </div>\n                )}\n              </div>\n            ))}\n\n            {/* Typing Indicator */}\n            {chatMutation.isPending && (\n              <div className=\"flex items-start space-x-3 animate-slide-up\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Bot className=\"text-white text-sm\" />\n                </div>\n                <div className=\"bg-white px-4 py-3 rounded-2xl border border-neutral-200\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-neutral-400 rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-neutral-400 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                    <div className=\"w-2 h-2 bg-neutral-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Chat Input */}\n          <CardContent className=\"p-4 border-t border-neutral-200 bg-white\">\n            <div className=\"flex space-x-3\">\n              <Input\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"궁금한 것을 물어보세요...\"\n                className=\"flex-1\"\n                disabled={chatMutation.isPending}\n              />\n              <Button \n                onClick={handleSendMessage}\n                disabled={!inputMessage.trim() || chatMutation.isPending}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            {/* Quick Questions */}\n            <div className=\"mt-3\">\n              <div className=\"flex flex-wrap gap-2\">\n                {quickQuestions.slice(0, 4).map((question, index) => (\n                  <Badge \n                    key={index}\n                    variant=\"secondary\" \n                    className=\"cursor-pointer hover:bg-neutral-200 transition-colors text-xs\"\n                    onClick={() => handleQuickQuestion(question)}\n                  >\n                    {question}\n                  </Badge>\n                ))}\n              </div>\n              {quickQuestions.length > 4 && (\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {quickQuestions.slice(4).map((question, index) => (\n                    <Badge \n                      key={index + 4}\n                      variant=\"outline\" \n                      className=\"cursor-pointer hover:bg-neutral-50 transition-colors text-xs\"\n                      onClick={() => handleQuickQuestion(question)}\n                    >\n                      {question}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n              <p className=\"text-xs text-neutral-500 mt-2\">\n                💬 더 자세한 이야기를 나눌수록 더 정확한 상담을 받을 수 있어요\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Chat Features */}\n        <div className=\"grid md:grid-cols-3 gap-6 mt-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Brain className=\"text-primary text-xl\" />\n              </div>\n              <h3 className=\"font-semibold text-neutral-900 mb-2\">개인화된 상담</h3>\n              <p className=\"text-sm text-neutral-600\">당신의 RIASEC 결과를 바탕으로 맞춤형 조언을 제공합니다</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"text-secondary text-xl\" />\n              </div>\n              <h3 className=\"font-semibold text-neutral-900 mb-2\">24시간 이용</h3>\n              <p className=\"text-sm text-neutral-600\">언제든지 궁금한 점을 물어보고 답변을 받을 수 있습니다</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <GraduationCap className=\"text-accent text-xl\" />\n              </div>\n              <h3 className=\"font-semibold text-neutral-900 mb-2\">안전한 상담</h3>\n              <p className=\"text-sm text-neutral-600\">악용 방지 시스템으로 안전하고 건전한 상담 환경을 제공합니다</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Chat() {\n  return (\n    <ProtectedRoute>\n      <ChatContent />\n    </ProtectedRoute>\n  );\n}\n","size_bytes":11154},"client/src/pages/help.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, CheckCircle, MessageCircle, BarChart3, Users, Lightbulb, Database, Bot } from \"lucide-react\";\n\nexport default function Help() {\n  const steps = [\n    {\n      title: \"1단계: RIASEC 성향 진단\",\n      description: \"간단한 질문들에 답하여 당신의 성향을 파악하세요\",\n      icon: CheckCircle,\n      color: \"bg-blue-500\"\n    },\n    {\n      title: \"2단계: AI 전공 추천\",\n      description: \"OpenAI GPT-4o가 당신의 성향에 맞는 전공을 추천합니다\",\n      icon: BarChart3,\n      color: \"bg-green-500\"\n    },\n    {\n      title: \"3단계: 유사 사례 확인\",\n      description: \"비슷한 성향의 선배들의 경험담을 확인하세요\",\n      icon: Users,\n      color: \"bg-purple-500\"\n    },\n    {\n      title: \"4단계: AI 상담 받기\",\n      description: \"궁금한 점이나 고민을 AI 상담사에게 물어보세요\",\n      icon: MessageCircle,\n      color: \"bg-orange-500\"\n    }\n  ];\n\n  const features = [\n    {\n      title: \"RIASEC 성향 진단\",\n      description: \"홀랜드의 직업 성격 유형 이론을 바탕으로 한 과학적 진단\",\n      icon: CheckCircle,\n      details: [\n        \"6가지 성격 유형 (현실형, 탐구형, 예술형, 사회형, 진취형, 관습형)\",\n        \"개인별 맞춤 분석 결과 제공\",\n        \"시각적 차트로 성향 비교\"\n      ]\n    },\n    {\n      title: \"AI 기반 전공 추천\",\n      description: \"OpenAI GPT-4o를 활용한 개인 맞춤형 전공 추천 시스템\",\n      icon: Lightbulb,\n      details: [\n        \"창의융합학부 10개 전공 데이터베이스\",\n        \"성향별 적합도 분석\",\n        \"상세한 추천 이유 설명\"\n      ]\n    },\n    {\n      title: \"벡터 기반 유사 사례 검색\",\n      description: \"Pinecone 벡터 데이터베이스로 비슷한 성향의 사례를 찾아드립니다\",\n      icon: Database,\n      details: [\n        \"실제 선배들의 전공 선택 경험담\",\n        \"만족도 및 진로 정보 제공\",\n        \"AI 임베딩을 통한 정확한 유사성 매칭\"\n      ]\n    },\n    {\n      title: \"지능형 상담 챗봇\",\n      description: \"Rasa 스타일의 대화 관리로 맥락을 이해하는 AI 상담\",\n      icon: Bot,\n      details: [\n        \"의도 분류 및 엔티티 추출\",\n        \"대화 흐름 관리 및 슬롯 추적\",\n        \"개인화된 상담 및 조언 제공\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen py-16 bg-neutral-50\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              홈으로 돌아가기\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-neutral-900 mb-4\">사용 가이드</h1>\n          <p className=\"text-lg text-neutral-600\">\n            전공 알래말래 시스템의 사용법을 단계별로 안내해드립니다.\n          </p>\n        </div>\n\n        {/* How to Use Steps */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-neutral-900 mb-6\">이용 방법</h2>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {steps.map((step, index) => {\n              const IconComponent = step.icon;\n              return (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start\">\n                      <div className={`w-12 h-12 ${step.color} rounded-lg flex items-center justify-center mr-4 flex-shrink-0`}>\n                        <IconComponent className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-bold text-lg text-neutral-900 mb-2\">\n                          {step.title}\n                        </h3>\n                        <p className=\"text-neutral-700 leading-relaxed\">\n                          {step.description}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* System Features */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-neutral-900 mb-6\">시스템 특징</h2>\n          <div className=\"space-y-6\">\n            {features.map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"flex items-start\">\n                      <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center mr-6 flex-shrink-0\">\n                        <IconComponent className=\"h-8 w-8 text-white\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-bold text-xl text-neutral-900 mb-2\">\n                          {feature.title}\n                        </h3>\n                        <p className=\"text-neutral-700 mb-4 leading-relaxed\">\n                          {feature.description}\n                        </p>\n                        <ul className=\"space-y-2\">\n                          {feature.details.map((detail, detailIndex) => (\n                            <li key={detailIndex} className=\"flex items-center text-neutral-600\">\n                              <div className=\"w-2 h-2 bg-primary rounded-full mr-3 flex-shrink-0\"></div>\n                              {detail}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* FAQ */}\n        <Card className=\"mb-12\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-neutral-900 mb-6\">자주 묻는 질문</h2>\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-900 mb-2\">\n                  Q. 진단 결과가 정확한가요?\n                </h3>\n                <p className=\"text-neutral-700\">\n                  RIASEC 모델은 심리학적으로 검증된 이론이며, OpenAI GPT-4o와 Pinecone 벡터 데이터베이스를 \n                  활용하여 더욱 정확하고 개인화된 결과를 제공합니다.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-900 mb-2\">\n                  Q. 진단 시간은 얼마나 걸리나요?\n                </h3>\n                <p className=\"text-neutral-700\">\n                  총 24개 질문으로 구성되어 있으며, 약 5-10분 정도 소요됩니다. \n                  각 질문에 신중히 답변할수록 더 정확한 결과를 얻을 수 있습니다.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-900 mb-2\">\n                  Q. AI 상담은 어떻게 이용하나요?\n                </h3>\n                <p className=\"text-neutral-700\">\n                  진단 완료 후 또는 우측 하단의 채팅 버튼을 통해 언제든지 AI 상담을 받을 수 있습니다. \n                  전공 관련 질문, 진로 고민, 학과 정보 등 다양한 주제로 상담 가능합니다.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-900 mb-2\">\n                  Q. 개인정보는 안전하게 보호되나요?\n                </h3>\n                <p className=\"text-neutral-700\">\n                  네, 모든 개인정보는 암호화되어 저장되며, 개인정보 보호법에 따라 안전하게 관리됩니다. \n                  자세한 내용은 개인정보 처리방침을 참고해주세요.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Get Started */}\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-neutral-900 mb-4\">지금 시작해보세요!</h2>\n          <p className=\"text-neutral-600 mb-6\">\n            간단한 진단으로 당신에게 맞는 전공을 찾아보세요.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/assessment\">\n              <Button size=\"lg\" className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4\">\n                성향 진단 시작하기\n              </Button>\n            </Link>\n            <Link href=\"/riasec-info\">\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-4\">\n                RIASEC 알아보기\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9319},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Brain, MessageSquare, BookOpen, Users, Play, HelpCircle, UserPlus, LogIn, Info, ArrowRight, Palette, Code, Music, Wrench } from \"lucide-react\";\n\nexport default function Home() {\n  const { isAuthenticated, user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-lg text-neutral-600\">로딩 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Landing page for non-authenticated users\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen\">\n        {/* Hero Section for Non-Authenticated Users */}\n        <section className=\"bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 py-16 sm:py-24\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <div className=\"animate-fade-in\">\n              <h1 className=\"text-4xl sm:text-5xl font-bold text-neutral-900 mb-6\">\n                전공 알래말래\n              </h1>\n              <h2 className=\"text-2xl sm:text-3xl font-semibold text-neutral-800 mb-6\">\n                창의융합학부 전공 매칭 시스템\n              </h2>\n              <p className=\"text-xl text-neutral-700 mb-8 max-w-2xl mx-auto\">\n                RIASEC 성향 진단을 통해 창의융합학부의 다양한 전공 중 당신에게 가장 적합한 분야를 추천해드립니다.\n              </p>\n              \n              {/* Call to Action */}\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n                <Link href=\"/register\">\n                  <Button \n                    size=\"lg\" \n                    className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all shadow-lg\"\n                  >\n                    <UserPlus className=\"mr-2 h-5 w-5\" />\n                    회원가입하고 시작하기\n                  </Button>\n                </Link>\n                <Link href=\"/login\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\" \n                    className=\"px-8 py-4 text-lg font-semibold border-2 hover:bg-neutral-50\"\n                  >\n                    <LogIn className=\"mr-2 h-5 w-5\" />\n                    로그인\n                  </Button>\n                </Link>\n              </div>\n\n              {/* Login Required Notice */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 max-w-2xl mx-auto\">\n                <div className=\"flex items-center justify-center mb-3\">\n                  <Info className=\"h-5 w-5 text-blue-600 mr-2\" />\n                  <span className=\"font-semibold text-blue-800\">로그인이 필요합니다</span>\n                </div>\n                <p className=\"text-blue-700\">\n                  모든 기능을 이용하려면 학번으로 회원가입 후 로그인해주세요.\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  // Main home page for authenticated users - clean and simple design inspired by the image\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Hero Section */}\n      <section className=\"bg-white py-20\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"space-y-8\">\n            {/* Main Heading */}\n            <div className=\"space-y-4\">\n              <h1 className=\"text-5xl font-bold text-gray-900\">\n                나에게 맞는 전공을 <span className=\"text-blue-600\">찾아보세요</span>\n              </h1>\n              <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n                RIASEC 성향 진단을 통해 창의융합학부의 다양한 전공 중 당신에게 가장 적합한 분야를 추천해드립니다.\n              </p>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/assessment\">\n                <Button \n                  size=\"lg\" \n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all\"\n                >\n                  <Play className=\"mr-2 h-5 w-5\" />\n                  진단 시작하기\n                </Button>\n              </Link>\n              <Link href=\"/riasec-info\">\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\" \n                  className=\"border-2 border-blue-600 text-blue-600 hover:bg-blue-50 px-8 py-4 text-lg font-semibold rounded-lg\"\n                >\n                  <HelpCircle className=\"mr-2 h-5 w-5\" />\n                  RIASEC이란?\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* RIASEC Types Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">RIASEC 성향 유형</h2>\n            <p className=\"text-lg text-gray-600\">6가지 성향 유형을 통해 당신의 특성을 파악해보세요</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {/* Realistic */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 shadow-lg bg-white\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-green-200 transition-colors\">\n                  <Wrench className=\"text-green-600 text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">실용형 (R)</h3>\n                <p className=\"text-gray-600 mb-4\">Realistic</p>\n                <p className=\"text-sm text-gray-500\">손으로 만들고 조작하는 활동을 선호하며 실제적이고 구체적인 과제를 좋아합니다.</p>\n              </CardContent>\n            </Card>\n\n            {/* Investigative */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 shadow-lg bg-white\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-blue-200 transition-colors\">\n                  <Brain className=\"text-blue-600 text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">탐구형 (I)</h3>\n                <p className=\"text-gray-600 mb-4\">Investigative</p>\n                <p className=\"text-sm text-gray-500\">관찰하고 분석하며 문제를 해결하는 것을 좋아하고 지적 호기심이 강합니다.</p>\n              </CardContent>\n            </Card>\n\n            {/* Artistic */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 shadow-lg bg-white\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-purple-200 transition-colors\">\n                  <Palette className=\"text-purple-600 text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">예술형 (A)</h3>\n                <p className=\"text-gray-600 mb-4\">Artistic</p>\n                <p className=\"text-sm text-gray-500\">창조적이고 독창적인 활동을 선호하며 예술적 표현에 관심이 높습니다.</p>\n              </CardContent>\n            </Card>\n\n            {/* Social */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 shadow-lg bg-white\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-red-200 transition-colors\">\n                  <Users className=\"text-red-600 text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">사회형 (S)</h3>\n                <p className=\"text-gray-600 mb-4\">Social</p>\n                <p className=\"text-sm text-gray-500\">사람들과 함께 일하고 도움을 주는 활동을 선호하며 협력적입니다.</p>\n              </CardContent>\n            </Card>\n\n            {/* Enterprising */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 shadow-lg bg-white\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-orange-200 transition-colors\">\n                  <MessageSquare className=\"text-orange-600 text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">기업형 (E)</h3>\n                <p className=\"text-gray-600 mb-4\">Enterprising</p>\n                <p className=\"text-sm text-gray-500\">리더십을 발휘하고 다른 사람을 설득하며 조직을 이끄는 것을 좋아합니다.</p>\n              </CardContent>\n            </Card>\n\n            {/* Conventional */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 shadow-lg bg-white\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-teal-100 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-teal-200 transition-colors\">\n                  <BookOpen className=\"text-teal-600 text-2xl\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">관습형 (C)</h3>\n                <p className=\"text-gray-600 mb-4\">Conventional</p>\n                <p className=\"text-sm text-gray-500\">체계적이고 논리적인 업무를 선호하며 규칙과 절차를 잘 따릅니다.</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">제공 서비스</h2>\n            <p className=\"text-lg text-gray-600\">전공 알래말래가 제공하는 다양한 서비스를 확인해보세요</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-xl transition-shadow border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mr-4\">\n                    <Brain className=\"text-blue-600 h-6 w-6\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">RIASEC 진단</h3>\n                </div>\n                <p className=\"text-gray-600\">과학적으로 검증된 RIASEC 이론을 바탕으로 한 정확한 성향 진단</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-xl transition-shadow border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\n                    <MessageSquare className=\"text-green-600 h-6 w-6\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">AI 상담</h3>\n                </div>\n                <p className=\"text-gray-600\">개인 맞춤형 AI 상담을 통한 전공 선택 가이드</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-xl transition-shadow border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mr-4\">\n                    <BookOpen className=\"text-purple-600 h-6 w-6\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">전공 정보</h3>\n                </div>\n                <p className=\"text-gray-600\">창의융합학부 내 모든 전공에 대한 상세 정보 제공</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-blue-600\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"text-white space-y-6\">\n            <h2 className=\"text-3xl font-bold\">지금 바로 시작해보세요!</h2>\n            <p className=\"text-xl text-blue-100\">\n              당신에게 완벽하게 맞는 전공을 찾아드립니다\n            </p>\n            <Link href=\"/assessment\">\n              <Button \n                size=\"lg\" \n                className=\"bg-white text-blue-600 hover:bg-gray-50 px-8 py-4 text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all\"\n              >\n                <Play className=\"mr-2 h-5 w-5\" />\n                성향 진단 시작하기\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":14100},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { loginUserSchema, type LoginUser } from \"@shared/schema\";\nimport { BookOpen, UserPlus, LogIn } from \"lucide-react\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LoginUser>({\n    resolver: zodResolver(loginUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginUser) => {\n      return await apiRequest(\"/api/auth/login\", \"POST\", data);\n    },\n    onSuccess: (data) => {\n      // Update the auth cache with the user data\n      queryClient.setQueryData([\"/api/auth/user\"], data.user);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      toast({\n        title: \"로그인 성공\",\n        description: \"환영합니다!\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"로그인 실패\",\n        description: error.message || \"로그인 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginUser) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-indigo-950 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Logo and Title */}\n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"bg-indigo-600 dark:bg-indigo-500 p-3 rounded-full\">\n              <BookOpen className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">전공 알래말래</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n            창의융합학부 맞춤형 전공 추천 시스템\n          </p>\n        </div>\n\n        {/* Login Form */}\n        <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-semibold text-center text-gray-900 dark:text-gray-100\">\n              로그인\n            </CardTitle>\n            <CardDescription className=\"text-center text-gray-600 dark:text-gray-400\">\n              계정에 로그인하여 개인 맞춤형 서비스를 이용하세요\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">사용자명</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"사용자명을 입력하세요\"\n                          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">비밀번호</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"비밀번호를 입력하세요\"\n                          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? (\n                    \"로그인 중...\"\n                  ) : (\n                    <>\n                      <LogIn className=\"mr-2 h-4 w-4\" />\n                      로그인\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            {/* Register Link */}\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                계정이 없으신가요?{\" \"}\n                <Link href=\"/register\">\n                  <Button variant=\"link\" className=\"p-0 h-auto text-indigo-600 dark:text-indigo-400\">\n                    <UserPlus className=\"mr-1 h-4 w-4\" />\n                    회원가입\n                  </Button>\n                </Link>\n              </p>\n            </div>\n\n            {/* Guest Access */}\n            <div className=\"mt-4 text-center\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" className=\"text-sm\">\n                  비회원으로 체험하기\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6294},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/privacy.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Shield, Database, Lock, UserCheck, AlertTriangle, Phone } from \"lucide-react\";\n\nexport default function Privacy() {\n  const lastUpdated = \"2025년 1월 4일\";\n\n  return (\n    <div className=\"min-h-screen py-16 bg-neutral-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              홈으로 돌아가기\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-neutral-900 mb-4\">개인정보 처리방침</h1>\n          <p className=\"text-lg text-neutral-600\">\n            전공 알래말래는 개인정보보호법에 따라 이용자의 개인정보 보호 및 권익을 보호하고자 \n            다음과 같이 개인정보 처리방침을 명시합니다.\n          </p>\n          <p className=\"text-sm text-neutral-500 mt-2\">최종 수정일: {lastUpdated}</p>\n        </div>\n\n        {/* 1. 개인정보 수집 항목 */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center mb-4\">\n              <Database className=\"h-6 w-6 text-primary mr-3\" />\n              <h2 className=\"text-xl font-bold text-neutral-900\">1. 수집하는 개인정보 항목</h2>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-800 mb-2\">필수 수집 항목</h3>\n                <ul className=\"list-disc list-inside text-neutral-700 space-y-1 ml-4\">\n                  <li>RIASEC 성향 진단 응답 데이터</li>\n                  <li>서비스 이용 기록 (진단 결과, 추천 전공 정보)</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-800 mb-2\">자동 수집 항목</h3>\n                <ul className=\"list-disc list-inside text-neutral-700 space-y-1 ml-4\">\n                  <li>IP 주소, 쿠키, 방문 기록</li>\n                  <li>기기 정보 (브라우저 종류, OS 정보)</li>\n                  <li>서비스 이용 시간 및 접속 로그</li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-800 mb-2\">선택 수집 항목</h3>\n                <ul className=\"list-disc list-inside text-neutral-700 space-y-1 ml-4\">\n                  <li>AI 상담 채팅 내용 (서비스 개선 목적)</li>\n                  <li>사용자 피드백 및 만족도 조사 응답</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 2. 개인정보 수집 및 이용 목적 */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center mb-4\">\n              <UserCheck className=\"h-6 w-6 text-primary mr-3\" />\n              <h2 className=\"text-xl font-bold text-neutral-900\">2. 개인정보 수집 및 이용 목적</h2>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-blue-800 mb-2\">서비스 제공</h3>\n                <ul className=\"text-blue-700 text-sm space-y-1\">\n                  <li>• RIASEC 성향 진단 서비스</li>\n                  <li>• AI 기반 전공 추천</li>\n                  <li>• 개인화된 상담 서비스</li>\n                  <li>• 유사 사례 매칭 서비스</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-green-800 mb-2\">서비스 개선</h3>\n                <ul className=\"text-green-700 text-sm space-y-1\">\n                  <li>• 서비스 품질 향상</li>\n                  <li>• 추천 알고리즘 개선</li>\n                  <li>• 신규 서비스 개발</li>\n                  <li>• 통계 분석 및 연구</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 3. 개인정보 보유 및 이용 기간 */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center mb-4\">\n              <Shield className=\"h-6 w-6 text-primary mr-3\" />\n              <h2 className=\"text-xl font-bold text-neutral-900\">3. 개인정보 보유 및 이용 기간</h2>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"bg-neutral-100 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-neutral-800 mb-2\">진단 결과 데이터</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  서비스 제공 완료 후 <strong>1년간 보관</strong> 후 자동 삭제\n                </p>\n              </div>\n              \n              <div className=\"bg-neutral-100 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-neutral-800 mb-2\">서비스 이용 기록</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  통신비밀보호법에 따라 <strong>3개월간 보관</strong> 후 삭제\n                </p>\n              </div>\n              \n              <div className=\"bg-neutral-100 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-neutral-800 mb-2\">쿠키 및 로그 데이터</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  수집일로부터 <strong>1년 이내</strong> 자동 삭제\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 4. 개인정보 제3자 제공 */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center mb-4\">\n              <AlertTriangle className=\"h-6 w-6 text-orange-500 mr-3\" />\n              <h2 className=\"text-xl font-bold text-neutral-900\">4. 개인정보의 제3자 제공</h2>\n            </div>\n            \n            <div className=\"bg-orange-50 p-6 rounded-lg border border-orange-200\">\n              <p className=\"text-orange-800 font-semibold mb-2\">\n                원칙적으로 개인정보를 제3자에게 제공하지 않습니다.\n              </p>\n              <p className=\"text-orange-700 text-sm\">\n                다만, 다음의 경우에는 예외로 합니다:\n              </p>\n              <ul className=\"list-disc list-inside text-orange-700 text-sm mt-2 space-y-1 ml-4\">\n                <li>이용자가 사전에 동의한 경우</li>\n                <li>법령의 규정에 의거하거나, 수사 목적으로 법령에 정해진 절차와 방법에 따라 수사기관의 요구가 있는 경우</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 5. 개인정보 처리 위탁 */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center mb-4\">\n              <Database className=\"h-6 w-6 text-primary mr-3\" />\n              <h2 className=\"text-xl font-bold text-neutral-900\">5. 개인정보 처리 위탁</h2>\n            </div>\n            \n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse border border-neutral-300\">\n                <thead>\n                  <tr className=\"bg-neutral-100\">\n                    <th className=\"border border-neutral-300 px-4 py-2 text-left\">수탁업체</th>\n                    <th className=\"border border-neutral-300 px-4 py-2 text-left\">위탁업무</th>\n                    <th className=\"border border-neutral-300 px-4 py-2 text-left\">보유기간</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td className=\"border border-neutral-300 px-4 py-2\">OpenAI</td>\n                    <td className=\"border border-neutral-300 px-4 py-2\">AI 기반 성향 분석 및 전공 추천</td>\n                    <td className=\"border border-neutral-300 px-4 py-2\">처리 완료 즉시 삭제</td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-neutral-300 px-4 py-2\">Pinecone</td>\n                    <td className=\"border border-neutral-300 px-4 py-2\">벡터 데이터베이스 및 유사성 검색</td>\n                    <td className=\"border border-neutral-300 px-4 py-2\">서비스 종료시까지</td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-neutral-300 px-4 py-2\">Neon Database</td>\n                    <td className=\"border border-neutral-300 px-4 py-2\">데이터 저장 및 관리</td>\n                    <td className=\"border border-neutral-300 px-4 py-2\">개인정보 보유기간과 동일</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 6. 정보주체의 권리 */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center mb-4\">\n              <UserCheck className=\"h-6 w-6 text-primary mr-3\" />\n              <h2 className=\"text-xl font-bold text-neutral-900\">6. 정보주체의 권리 및 행사 방법</h2>\n            </div>\n            \n            <p className=\"text-neutral-700 mb-4\">\n              이용자는 언제든지 다음과 같은 권리를 행사할 수 있습니다:\n            </p>\n            \n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-blue-800 mb-2\">개인정보 열람권</h3>\n                <p className=\"text-blue-700 text-sm\">\n                  자신의 개인정보 처리 현황을 확인할 수 있습니다.\n                </p>\n              </div>\n              \n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-green-800 mb-2\">정정·삭제권</h3>\n                <p className=\"text-green-700 text-sm\">\n                  잘못된 정보의 수정이나 삭제를 요구할 수 있습니다.\n                </p>\n              </div>\n              \n              <div className=\"bg-purple-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-purple-800 mb-2\">처리정지권</h3>\n                <p className=\"text-purple-700 text-sm\">\n                  개인정보 처리 중단을 요구할 수 있습니다.\n                </p>\n              </div>\n              \n              <div className=\"bg-orange-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-orange-800 mb-2\">손해배상청구권</h3>\n                <p className=\"text-orange-700 text-sm\">\n                  개인정보 침해로 인한 피해 배상을 청구할 수 있습니다.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 7. 개인정보의 안전성 확보 조치 */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center mb-4\">\n              <Lock className=\"h-6 w-6 text-primary mr-3\" />\n              <h2 className=\"text-xl font-bold text-neutral-900\">7. 개인정보의 안전성 확보 조치</h2>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-800 mb-3\">기술적 조치</h3>\n                <ul className=\"list-disc list-inside text-neutral-700 space-y-1 ml-4\">\n                  <li>개인정보 암호화 저장</li>\n                  <li>해킹 등에 대비한 기술적 대책</li>\n                  <li>백신 프로그램 설치 및 갱신</li>\n                  <li>접근통제시스템 설치</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-800 mb-3\">관리적 조치</h3>\n                <ul className=\"list-disc list-inside text-neutral-700 space-y-1 ml-4\">\n                  <li>개인정보 보호책임자 지정</li>\n                  <li>정기적인 직원 교육</li>\n                  <li>내부관리계획 수립 및 시행</li>\n                  <li>개인정보 취급자 최소화</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 8. 개인정보 보호책임자 */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center mb-4\">\n              <Phone className=\"h-6 w-6 text-primary mr-3\" />\n              <h2 className=\"text-xl font-bold text-neutral-900\">8. 개인정보 보호책임자</h2>\n            </div>\n            \n            <div className=\"bg-neutral-100 p-6 rounded-lg\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"font-semibold text-lg text-neutral-800 mb-2\">개인정보 보호책임자</h3>\n                  <ul className=\"text-neutral-700 space-y-1\">\n                    <li><strong>성명:</strong> 김철수</li>\n                    <li><strong>직책:</strong> 개발팀장</li>\n                    <li><strong>연락처:</strong> privacy@major-guide.kr</li>\n                    <li><strong>전화:</strong> 02-1234-5678</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-semibold text-lg text-neutral-800 mb-2\">개인정보 보호담당자</h3>\n                  <ul className=\"text-neutral-700 space-y-1\">\n                    <li><strong>성명:</strong> 이영희</li>\n                    <li><strong>부서:</strong> 기획팀</li>\n                    <li><strong>연락처:</strong> support@major-guide.kr</li>\n                    <li><strong>전화:</strong> 02-1234-5679</li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 pt-4 border-t border-neutral-300\">\n                <p className=\"text-neutral-600 text-sm\">\n                  개인정보와 관련한 문의사항이 있으시면 위 연락처로 연락주시기 바랍니다. \n                  신속하고 성실하게 답변드리겠습니다.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 9. 기타 */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-xl font-bold text-neutral-900 mb-4\">9. 기타</h2>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-800 mb-2\">만 14세 미만 아동의 개인정보 보호</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  만 14세 미만 아동의 개인정보를 수집하는 경우에는 법정대리인의 동의를 받습니다.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-800 mb-2\">개인정보 처리방침 변경</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  이 개인정보처리방침은 시행일로부터 적용되며, 법령 및 방침에 따른 변경내용의 \n                  추가, 삭제 및 정정이 있는 경우에는 변경사항의 시행 7일 전부터 공지사항을 통하여 고지할 것입니다.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-lg text-neutral-800 mb-2\">개인정보 침해신고</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  개인정보 침해신고센터 (privacy.go.kr, 국번없이 182) 또는 \n                  대검찰청 사이버범죄수사단 (www.spo.go.kr, 국번없이 1301)에 신고할 수 있습니다.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Back to Home */}\n        <div className=\"text-center\">\n          <Link href=\"/\">\n            <Button className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3\">\n              홈으로 돌아가기\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16836},"client/src/pages/profile.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { User, Calendar, BookOpen, MessageSquare, LogOut, TrendingUp, Award, Clock, Camera } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport type { Assessment } from \"@shared/schema\";\nimport { useState, useRef } from \"react\";\n\nfunction ProfileContent() {\n  const { user, logout, isLoggingOut } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [profileImage, setProfileImage] = useState<string | null>(null);\n\n  // Fetch user's assessments\n  const { data: assessments = [], isLoading: assessmentsLoading } = useQuery<Assessment[]>({\n    queryKey: [\"/api/assessments\"],\n    retry: false,\n  });\n\n  // Profile image upload mutation\n  const uploadImageMutation = useMutation({\n    mutationFn: async (imageData: string) => {\n      return await apiRequest(\"/api/profile/image\", \"POST\", { imageData });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"프로필 사진 변경 완료\",\n        description: \"프로필 사진이 성공적으로 변경되었습니다.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"업로드 실패\",\n        description: error.message || \"프로필 사진 업로드에 실패했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Check file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"파일 크기 초과\",\n        description: \"5MB 이하의 이미지를 선택해 주세요.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"잘못된 파일 형식\",\n        description: \"이미지 파일만 업로드 가능합니다.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const imageData = e.target?.result as string;\n      setProfileImage(imageData);\n      uploadImageMutation.mutate(imageData);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleLogout = () => {\n    logout();\n    toast({\n      title: \"로그아웃 완료\",\n      description: \"안전하게 로그아웃되었습니다.\",\n    });\n  };\n\n  const formatDate = (date: string | Date) => {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getLatestAssessment = (): Assessment | null => {\n    if (!assessments || !Array.isArray(assessments) || assessments.length === 0) return null;\n    return [...assessments].sort((a: Assessment, b: Assessment) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    )[0];\n  };\n\n  const latestAssessment = getLatestAssessment();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-8 mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                {profileImage || user?.profileImage ? (\n                  <img \n                    src={profileImage || user?.profileImage} \n                    alt=\"프로필 사진\"\n                    className=\"w-16 h-16 rounded-full object-cover border-2 border-neutral-200\"\n                  />\n                ) : (\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n                    <User className=\"text-white text-2xl\" />\n                  </div>\n                )}\n                <button\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-primary rounded-full flex items-center justify-center hover:bg-primary/90 transition-colors\"\n                  disabled={uploadImageMutation.isPending}\n                >\n                  <Camera className=\"w-3 h-3 text-white\" />\n                </button>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                  className=\"hidden\"\n                />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">내 프로필</h1>\n                <p className=\"text-gray-600\">학번: {user?.studentId}</p>\n                <p className=\"text-gray-600\">사용자명: {user?.username}</p>\n                {uploadImageMutation.isPending && (\n                  <p className=\"text-sm text-primary\">프로필 사진 업로드 중...</p>\n                )}\n              </div>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={handleLogout}\n              disabled={isLoggingOut}\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              {isLoggingOut ? \"로그아웃 중...\" : \"로그아웃\"}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Left Column - Assessment Results */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Latest Assessment */}\n            {latestAssessment ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Award className=\"text-primary mr-2 h-5 w-5\" />\n                    최근 진단 결과\n                  </CardTitle>\n                  <CardDescription>\n                    {formatDate(latestAssessment.createdAt)}에 완료\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* RIASEC Scores */}\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-4\">RIASEC 성향 점수</h4>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm font-medium text-gray-700\">실용형 (R)</span>\n                          <span className=\"text-sm font-medium text-gray-900\">{latestAssessment.riasecScores.realistic}점</span>\n                        </div>\n                        <Progress value={latestAssessment.riasecScores.realistic} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm font-medium text-gray-700\">탐구형 (I)</span>\n                          <span className=\"text-sm font-medium text-gray-900\">{latestAssessment.riasecScores.investigative}점</span>\n                        </div>\n                        <Progress value={latestAssessment.riasecScores.investigative} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm font-medium text-gray-700\">예술형 (A)</span>\n                          <span className=\"text-sm font-medium text-gray-900\">{latestAssessment.riasecScores.artistic}점</span>\n                        </div>\n                        <Progress value={latestAssessment.riasecScores.artistic} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm font-medium text-gray-700\">사회형 (S)</span>\n                          <span className=\"text-sm font-medium text-gray-900\">{latestAssessment.riasecScores.social}점</span>\n                        </div>\n                        <Progress value={latestAssessment.riasecScores.social} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm font-medium text-gray-700\">기업형 (E)</span>\n                          <span className=\"text-sm font-medium text-gray-900\">{latestAssessment.riasecScores.enterprising}점</span>\n                        </div>\n                        <Progress value={latestAssessment.riasecScores.enterprising} className=\"h-2\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"text-sm font-medium text-gray-700\">관습형 (C)</span>\n                          <span className=\"text-sm font-medium text-gray-900\">{latestAssessment.riasecScores.conventional}점</span>\n                        </div>\n                        <Progress value={latestAssessment.riasecScores.conventional} className=\"h-2\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Recommended Majors */}\n                  {latestAssessment.recommendedMajors && (\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">추천 전공</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {latestAssessment.recommendedMajors.map((major: string, index: number) => (\n                          <Badge key={index} variant=\"secondary\" className=\"px-3 py-1\">\n                            {major}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex flex-wrap gap-3\">\n                    <Link href={`/results/${latestAssessment.id}`}>\n                      <Button className=\"bg-primary hover:bg-primary/90\">\n                        <BookOpen className=\"mr-2 h-4 w-4\" />\n                        전체 결과 보기\n                      </Button>\n                    </Link>\n                    <Link href={`/satisfaction-survey/${latestAssessment.id}`}>\n                      <Button className=\"bg-green-600 hover:bg-green-700 text-white\">\n                        <Award className=\"mr-2 h-4 w-4\" />\n                        만족도 조사 참여\n                      </Button>\n                    </Link>\n                    <Link href=\"/chat\">\n                      <Button variant=\"outline\">\n                        <MessageSquare className=\"mr-2 h-4 w-4\" />\n                        AI 상담하기\n                      </Button>\n                    </Link>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>진단 기록이 없습니다</CardTitle>\n                  <CardDescription>\n                    RIASEC 성향 진단을 받아보시겠어요?\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Link href=\"/assessment\">\n                    <Button className=\"bg-primary hover:bg-primary/90\">\n                      <TrendingUp className=\"mr-2 h-4 w-4\" />\n                      성향 진단 시작하기\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Assessment History */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"text-blue-600 mr-2 h-5 w-5\" />\n                  진단 기록\n                </CardTitle>\n                <CardDescription>\n                  이전에 받았던 진단 결과들을 확인할 수 있습니다\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {assessmentsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                    <p className=\"mt-2 text-sm text-gray-600\">진단 기록을 불러오는 중...</p>\n                  </div>\n                ) : Array.isArray(assessments) && assessments.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {assessments.slice(0, 5).map((assessment: Assessment) => (\n                      <div key={assessment.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <p className=\"font-medium text-gray-900\">\n                            {formatDate(assessment.createdAt)} 진단\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            주요 성향: 분석 완료\n                          </p>\n                        </div>\n                        <Link href={`/results/${assessment.id}`}>\n                          <Button size=\"sm\" variant=\"outline\">\n                            결과 보기\n                          </Button>\n                        </Link>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <BookOpen className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">아직 진단 기록이 없습니다</p>\n                    <Link href=\"/assessment\">\n                      <Button className=\"mt-4\" variant=\"outline\">\n                        첫 번째 진단 받기\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Quick Actions */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>빠른 기능</CardTitle>\n                <CardDescription>\n                  자주 사용하는 기능들에 빠르게 접근하세요\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Link href=\"/assessment\">\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <TrendingUp className=\"mr-2 h-4 w-4\" />\n                    새로운 진단 받기\n                  </Button>\n                </Link>\n                <Link href=\"/chat\">\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <MessageSquare className=\"mr-2 h-4 w-4\" />\n                    AI 전공 상담\n                  </Button>\n                </Link>\n                <Link href=\"/riasec-info\">\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <BookOpen className=\"mr-2 h-4 w-4\" />\n                    RIASEC 이론 알아보기\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Account Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>계정 정보</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-gray-600\">학번</span>\n                  <span className=\"text-sm text-gray-900\">{user?.studentId}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-gray-600\">사용자명</span>\n                  <span className=\"text-sm text-gray-900\">{user?.username}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-gray-600\">가입일</span>\n                  <span className=\"text-sm text-gray-900\">\n                    {user?.createdAt ? formatDate(user.createdAt) : \"-\"}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-gray-600\">진단 횟수</span>\n                  <span className=\"text-sm text-gray-900\">{Array.isArray(assessments) ? assessments.length : 0}회</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <ProtectedRoute>\n      <ProfileContent />\n    </ProtectedRoute>\n  );\n}","size_bytes":17676},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { BookOpen, UserPlus, LogIn, GraduationCap } from \"lucide-react\";\n\nexport default function RegisterPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      studentId: \"\",\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      return await apiRequest(\"/api/auth/register\", \"POST\", data);\n    },\n    onSuccess: (data) => {\n      // Update the auth cache with the user data\n      queryClient.setQueryData([\"/api/auth/user\"], data.user);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      toast({\n        title: \"회원가입 성공\",\n        description: \"환영합니다! 로그인되었습니다.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"회원가입 실패\",\n        description: error.message || \"회원가입 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertUser) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-indigo-950 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Logo and Title */}\n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"bg-indigo-600 dark:bg-indigo-500 p-3 rounded-full\">\n              <BookOpen className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">전공 알래말래</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n            창의융합학부 맞춤형 전공 추천 시스템\n          </p>\n        </div>\n\n        {/* Register Form */}\n        <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-semibold text-center text-gray-900 dark:text-gray-100\">\n              회원가입\n            </CardTitle>\n            <CardDescription className=\"text-center text-gray-600 dark:text-gray-400\">\n              개인 맞춤형 전공 추천 서비스를 이용하세요\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"studentId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">\n                        <GraduationCap className=\"inline mr-1 h-4 w-4\" />\n                        학번\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"202400101 (9자리 숫자)\"\n                          maxLength={9}\n                          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        예시: 202400101 (입학년도 4자리 + 일련번호 5자리)\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">사용자명</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"사용자명을 입력하세요 (최소 3자)\"\n                          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700 dark:text-gray-300\">비밀번호</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"비밀번호를 입력하세요 (최소 6자)\"\n                          className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600\"\n                  disabled={registerMutation.isPending}\n                >\n                  {registerMutation.isPending ? (\n                    \"회원가입 중...\"\n                  ) : (\n                    <>\n                      <UserPlus className=\"mr-2 h-4 w-4\" />\n                      회원가입\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            {/* Login Link */}\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                이미 계정이 있으신가요?{\" \"}\n                <Link href=\"/login\">\n                  <Button variant=\"link\" className=\"p-0 h-auto text-indigo-600 dark:text-indigo-400\">\n                    <LogIn className=\"mr-1 h-4 w-4\" />\n                    로그인\n                  </Button>\n                </Link>\n              </p>\n            </div>\n\n            {/* Guest Access */}\n            <div className=\"mt-4 text-center\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" className=\"text-sm\">\n                  비회원으로 체험하기\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7492},"client/src/pages/results.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { MessageCircle, RotateCcw, Download, Lightbulb, Star } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { BookmarkButton } from \"@/components/bookmark-button\";\nimport { LoadingSpinner } from \"@/components/loading-spinner\";\nimport { ValidationAlert } from \"@/components/validation-alert\";\nimport type { Assessment } from \"@shared/schema\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport RIASECChart from \"@/components/riasec-chart\";\n\nfunction ResultsContent() {\n  const { id } = useParams();\n  \n  const { data: assessment, isLoading, error } = useQuery<Assessment>({\n    queryKey: [\"/api/assessments\", id],\n    enabled: !!id\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen py-16 bg-neutral-50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <Skeleton className=\"h-8 w-64 mx-auto mb-4\" />\n            <Skeleton className=\"h-6 w-96 mx-auto\" />\n          </div>\n          <Card>\n            <CardContent className=\"p-8\">\n              <Skeleton className=\"h-64 w-full\" />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !assessment) {\n    return (\n      <div className=\"min-h-screen py-16 bg-neutral-50 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-xl font-bold text-neutral-900 mb-4\">결과를 찾을 수 없습니다</h2>\n            <p className=\"text-neutral-600 mb-6\">진단 결과가 존재하지 않거나 만료되었습니다.</p>\n            <Link href=\"/assessment\">\n              <Button>새로 진단하기</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const riasecTypes = [\n    { key: \"realistic\", name: \"실용적\", letter: \"R\", color: \"bg-primary\" },\n    { key: \"investigative\", name: \"탐구적\", letter: \"I\", color: \"bg-secondary\" },\n    { key: \"artistic\", name: \"예술적\", letter: \"A\", color: \"bg-accent\" },\n    { key: \"social\", name: \"사회적\", letter: \"S\", color: \"bg-yellow-500\" },\n    { key: \"enterprising\", name: \"진취적\", letter: \"E\", color: \"bg-purple-500\" },\n    { key: \"conventional\", name: \"관습적\", letter: \"C\", color: \"bg-neutral-500\" }\n  ];\n\n  // Sort RIASEC scores by value\n  const sortedScores = riasecTypes\n    .map(type => ({\n      ...type,\n      score: assessment.riasecScores[type.key as keyof typeof assessment.riasecScores]\n    }))\n    .sort((a, b) => b.score - a.score);\n\n  const primaryType = sortedScores[0];\n  const secondaryType = sortedScores[1];\n\n  return (\n    <div className=\"min-h-screen py-16 bg-neutral-50\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl font-bold text-neutral-900 mb-4\">진단 결과</h1>\n          <p className=\"text-lg text-neutral-600\">당신의 RIASEC 성향 분석 결과입니다</p>\n        </div>\n\n        {/* GPT Validation Warnings */}\n        <ValidationAlert \n          warnings={(assessment as any).validationWarnings}\n          note={(assessment as any).validationNote}\n          type=\"warning\"\n        />\n\n        {/* Results Overview */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-neutral-900 mb-4\">주요 성향</h2>\n              <div className=\"flex justify-center items-center space-x-4\">\n                <span className={`inline-block ${primaryType.color} text-white px-4 py-2 rounded-full font-semibold text-lg`}>\n                  {primaryType.name} ({primaryType.letter})\n                </span>\n                <span className=\"text-neutral-400\">+</span>\n                <span className={`inline-block ${secondaryType.color} text-white px-4 py-2 rounded-full font-semibold text-lg`}>\n                  {secondaryType.name} ({secondaryType.letter})\n                </span>\n              </div>\n            </div>\n\n            {/* RIASEC Chart - Full Width */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-lg font-semibold text-neutral-900 mb-4 text-center\">RIASEC 성향 육각형 차트 (100점 만점)</h3>\n              <div className=\"h-[800px] mb-8\">\n                <RIASECChart riasecScores={assessment.riasecScores} />\n              </div>\n            </div>\n\n            {/* Scores and Recommendations */}\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-neutral-900 mb-4\">성향별 점수</h3>\n                <div className=\"space-y-3\">\n                  {sortedScores.map((type) => (\n                    <div key={type.key} className=\"flex items-center justify-between p-3 bg-neutral-50 rounded-lg\">\n                      <div className=\"flex items-center\">\n                        <div className={`w-8 h-8 ${type.color} rounded-full flex items-center justify-center mr-3`}>\n                          <span className=\"text-white text-sm font-bold\">{type.letter}</span>\n                        </div>\n                        <span className=\"font-medium text-neutral-800\">{type.name}</span>\n                      </div>\n                      <span className=\"text-lg font-bold text-neutral-700\">\n                        {Math.round(type.score)}점\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold text-neutral-900 mb-4\">추천 전공</h3>\n                <div className=\"space-y-3\">\n                  {assessment.recommendedMajors.slice(0, 3).map((major, index) => (\n                    <div key={index} className=\"bg-neutral-50 rounded-xl p-4 border border-neutral-200\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold text-neutral-900\">{major}</h4>\n                        <span className=\"bg-primary text-white px-3 py-1 rounded-full text-sm font-medium\">\n                          추천\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-neutral-600\">\n                        당신의 {primaryType.name}·{secondaryType.name} 성향에 적합한 전공입니다.\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Detailed Explanation */}\n            <div className=\"mt-8 p-6 bg-neutral-50 rounded-xl border border-neutral-200\">\n              <h3 className=\"text-lg font-semibold text-neutral-900 mb-3 flex items-center\">\n                <Lightbulb className=\"text-accent mr-2 h-5 w-5\" />\n                왜 이 전공들이 적합한가요?\n              </h3>\n              <p className=\"text-neutral-700 leading-relaxed\">\n                {assessment.explanation}\n              </p>\n            </div>\n\n            {/* Similar Cases Feedback from Pinecone */}\n            {assessment.similarCasesFeedback && (\n              <div className=\"mt-6 p-6 bg-blue-50 rounded-xl border border-blue-200\">\n                <h3 className=\"text-lg font-semibold text-neutral-900 mb-3 flex items-center\">\n                  <MessageCircle className=\"text-blue-600 mr-2 h-5 w-5\" />\n                  비슷한 성향의 선배들 경험담\n                </h3>\n                <p className=\"text-neutral-700 leading-relaxed\">\n                  {assessment.similarCasesFeedback}\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recommended Majors with Bookmarks */}\n        {assessment.recommendedMajors && assessment.recommendedMajors.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-bold text-neutral-900 mb-4 flex items-center\">\n                <Lightbulb className=\"mr-2 h-5 w-5 text-yellow-500\" />\n                추천 전공\n              </h3>\n              <div className=\"grid gap-4\">\n                {assessment.recommendedMajors.map((major, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 bg-neutral-50 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-neutral-900\">{major}</h4>\n                      <p className=\"text-sm text-neutral-600\">충남대학교 창의융합학부</p>\n                    </div>\n                    <BookmarkButton majorName={major} />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Link href=\"/chat\">\n            <Button \n              size=\"lg\" \n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all shadow-lg\"\n            >\n              <MessageCircle className=\"mr-2 h-5 w-5\" />\n              전공 상담 받기\n            </Button>\n          </Link>\n          \n          <Link href={`/satisfaction-survey/${assessment.id}`}>\n            <Button \n              size=\"lg\" \n              className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all shadow-lg\"\n            >\n              <Star className=\"mr-2 h-5 w-5\" />\n              만족도 평가\n            </Button>\n          </Link>\n          \n          <Link href=\"/assessment\">\n            <Button \n              variant=\"outline\" \n              size=\"lg\" \n              className=\"border-2 border-primary text-primary hover:bg-primary hover:text-white px-8 py-4 text-lg font-semibold\"\n            >\n              <RotateCcw className=\"mr-2 h-5 w-5\" />\n              다시 진단하기\n            </Button>\n          </Link>\n          \n          <Button \n            variant=\"outline\" \n            size=\"lg\" \n            className=\"border-2 border-secondary text-secondary hover:bg-secondary hover:text-white px-8 py-4 text-lg font-semibold\"\n            onClick={() => window.print()}\n          >\n            <Download className=\"mr-2 h-5 w-5\" />\n            결과 저장하기\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Results() {\n  return (\n    <ProtectedRoute>\n      <ResultsContent />\n    </ProtectedRoute>\n  );\n}\n","size_bytes":10944},"client/src/pages/riasec-info.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Users, Lightbulb, Target, Zap, Brain, Settings } from \"lucide-react\";\n\nexport default function RiasecInfo() {\n  const riasecTypes = [\n    {\n      code: \"R\",\n      name: \"현실형\",\n      englishName: \"Realistic\",\n      description: \"손을 쓰는 활동 선호, 도구·기계·자연 환경 다루기 좋아함\",\n      examples: [\"엔지니어\", \"정비사\", \"건설 노동자\", \"조경사\"],\n      color: \"bg-blue-500\",\n      icon: Settings\n    },\n    {\n      code: \"I\", \n      name: \"탐구형\",\n      englishName: \"Investigative\",\n      description: \"지적 호기심, 자료 수집·분석·문제 해결 선호\",\n      examples: [\"연구원\", \"의사\", \"데이터 분석가\", \"과학자\"],\n      color: \"bg-purple-500\",\n      icon: Brain\n    },\n    {\n      code: \"A\",\n      name: \"예술형\", \n      englishName: \"Artistic\",\n      description: \"창의적 표현 선호, 자유로운 구조·형식 선호\",\n      examples: [\"디자이너\", \"작가\", \"음악가\", \"예술가\"],\n      color: \"bg-pink-500\",\n      icon: Lightbulb\n    },\n    {\n      code: \"S\",\n      name: \"사회형\",\n      englishName: \"Social\", \n      description: \"사람과 상호작용 선호, 교육·상담·돌봄에 관심\",\n      examples: [\"교사\", \"심리상담사\", \"간호사\", \"사회복지사\"],\n      color: \"bg-green-500\",\n      icon: Users\n    },\n    {\n      code: \"E\",\n      name: \"진취형\",\n      englishName: \"Enterprising\",\n      description: \"리더십·설득력·목표 지향형, 경영·영업·정치 활동 선호\", \n      examples: [\"경영자\", \"영업 사원\", \"정치인\", \"부동산 중개인\"],\n      color: \"bg-orange-500\",\n      icon: Target\n    },\n    {\n      code: \"C\",\n      name: \"관습형\",\n      englishName: \"Conventional\",\n      description: \"체계적·논리적 업무 선호, 자료 정리·문서화·규칙 준수\",\n      examples: [\"회계사\", \"사무원\", \"은행 직원\", \"행정직\"],\n      color: \"bg-gray-500\", \n      icon: Zap\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen py-16 bg-neutral-50\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              홈으로 돌아가기\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold text-neutral-900 mb-4\">RIASEC 모델이란?</h1>\n          <p className=\"text-lg text-neutral-600 leading-relaxed\">\n            미국 심리학자 존 L. 홀랜드(John L. Holland)가 제안한 직업 성격 유형 이론입니다. \n            개인의 흥미·성격 특성과 직업 환경이 잘 맞을 때 직업 만족도와 성과가 높다는 이론을 바탕으로 합니다.\n          </p>\n        </div>\n\n        {/* RIASEC Overview */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-neutral-900 mb-6\">RIASEC 육각형 모델</h2>\n            <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n              <div>\n                <p className=\"text-neutral-700 mb-4\">\n                  RIASEC 유형은 육각형 모형으로 배치되어, 이웃한 유형일수록 유사도가 높고 \n                  맞은편에 있을수록 차이가 큽니다.\n                </p>\n                <div className=\"bg-neutral-100 p-6 rounded-lg\">\n                  <h3 className=\"font-semibold mb-3\">인접성 관계</h3>\n                  <ul className=\"text-sm text-neutral-700 space-y-1\">\n                    <li>• 현실형(R) ↔ 탐구형(I) ↔ 예술형(A)</li>\n                    <li>• 예술형(A) ↔ 사회형(S) ↔ 진취형(E)</li>\n                    <li>• 진취형(E) ↔ 관습형(C) ↔ 현실형(R)</li>\n                  </ul>\n                  <h3 className=\"font-semibold mt-4 mb-3\">대립성 관계</h3>\n                  <ul className=\"text-sm text-neutral-700 space-y-1\">\n                    <li>• 현실형(R) ↔ 사회형(S)</li>\n                    <li>• 탐구형(I) ↔ 진취형(E)</li>\n                    <li>• 예술형(A) ↔ 관습형(C)</li>\n                  </ul>\n                </div>\n              </div>\n              <div className=\"flex justify-center\">\n                <div className=\"relative w-64 h-64\">\n                  {/* Hexagon visualization */}\n                  <svg viewBox=\"0 0 200 200\" className=\"w-full h-full\">\n                    <polygon\n                      points=\"100,20 170,60 170,140 100,180 30,140 30,60\"\n                      fill=\"none\"\n                      stroke=\"#6366f1\"\n                      strokeWidth=\"2\"\n                    />\n                    {/* RIASEC labels */}\n                    <text x=\"100\" y=\"15\" textAnchor=\"middle\" className=\"text-sm font-bold fill-purple-600\">I</text>\n                    <text x=\"175\" y=\"65\" textAnchor=\"middle\" className=\"text-sm font-bold fill-pink-600\">A</text>\n                    <text x=\"175\" y=\"145\" textAnchor=\"middle\" className=\"text-sm font-bold fill-green-600\">S</text>\n                    <text x=\"100\" y=\"195\" textAnchor=\"middle\" className=\"text-sm font-bold fill-orange-600\">E</text>\n                    <text x=\"25\" y=\"145\" textAnchor=\"middle\" className=\"text-sm font-bold fill-gray-600\">C</text>\n                    <text x=\"25\" y=\"65\" textAnchor=\"middle\" className=\"text-sm font-bold fill-blue-600\">R</text>\n                  </svg>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* RIASEC Types */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-neutral-900 mb-6\">6가지 성격 유형</h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {riasecTypes.map((type) => {\n              const IconComponent = type.icon;\n              return (\n                <Card key={type.code} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center mb-4\">\n                      <div className={`w-12 h-12 ${type.color} rounded-lg flex items-center justify-center mr-4`}>\n                        <IconComponent className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-bold text-lg text-neutral-900\">\n                          {type.name} ({type.code})\n                        </h3>\n                        <p className=\"text-sm text-neutral-600\">{type.englishName}</p>\n                      </div>\n                    </div>\n                    <p className=\"text-neutral-700 mb-4 text-sm leading-relaxed\">\n                      {type.description}\n                    </p>\n                    <div>\n                      <h4 className=\"font-semibold text-sm text-neutral-800 mb-2\">예시 직업</h4>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {type.examples.map((example) => (\n                          <span\n                            key={example}\n                            className=\"bg-neutral-100 text-neutral-700 px-2 py-1 rounded text-xs\"\n                          >\n                            {example}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* How to Use */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-neutral-900 mb-6\">RIASEC 활용 방법</h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-white font-bold text-xl\">1</span>\n                </div>\n                <h3 className=\"font-semibold text-lg mb-2\">진단 받기</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  간단한 질문들을 통해 자신의 RIASEC 성향을 파악합니다.\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-white font-bold text-xl\">2</span>\n                </div>\n                <h3 className=\"font-semibold text-lg mb-2\">결과 분석</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  상위 2-3개 유형을 조합해 자신만의 프로파일을 확인합니다.\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-white font-bold text-xl\">3</span>\n                </div>\n                <h3 className=\"font-semibold text-lg mb-2\">전공 선택</h3>\n                <p className=\"text-neutral-700 text-sm\">\n                  AI 추천을 바탕으로 적합한 전공과 진로를 탐색합니다.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Example Profile */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-neutral-900 mb-6\">프로파일 해석 예시</h2>\n            <div className=\"bg-gradient-to-r from-pink-50 to-purple-50 p-6 rounded-lg border border-pink-200\">\n              <h3 className=\"font-bold text-lg mb-3 text-purple-800\">\n                A(예술형) - I(탐구형) - S(사회형) 상위순\n              </h3>\n              <p className=\"text-purple-700 mb-4\">\n                창의적이면서도 지적 호기심이 강하고, 사람과 교류하는 데서 만족을 느끼는 유형\n              </p>\n              <div>\n                <h4 className=\"font-semibold mb-2 text-purple-800\">추천 직업</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {[\"UX 디자이너\", \"과학 커뮤니케이터\", \"교육 콘텐츠 기획자\", \"디지털미디어 전문가\"].map((job) => (\n                    <span key={job} className=\"bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm\">\n                      {job}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* CTA */}\n        <div className=\"text-center\">\n          <Link href=\"/assessment\">\n            <Button size=\"lg\" className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 text-lg\">\n              나의 RIASEC 성향 진단하기\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11176},"client/src/pages/satisfaction-survey.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { insertSatisfactionSurveySchema, type InsertSatisfactionSurvey } from \"@shared/schema\";\nimport { Star, Heart, ThumbsUp, MessageSquare } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ValidationAlert } from \"@/components/validation-alert\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\n\ninterface SatisfactionSurveyPageProps {\n  params: { assessmentId: string };\n}\n\nfunction SatisfactionSurveyContent({ params }: SatisfactionSurveyPageProps) {\n  const { assessmentId } = params;\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n\n  const form = useForm<Omit<InsertSatisfactionSurvey, \"userId\">>({\n    resolver: zodResolver(insertSatisfactionSurveySchema.omit({ userId: true })),\n    defaultValues: {\n      assessmentId,\n      overallSatisfaction: 5,\n      recommendationAccuracy: 5,\n      systemUsability: 5,\n      wouldRecommend: true,\n      feedback: \"\",\n      selectedMajor: \"\",\n      majorSatisfaction: undefined,\n    },\n  });\n\n  const [validationWarnings, setValidationWarnings] = useState<string[]>([]);\n\n  const surveyMutation = useMutation({\n    mutationFn: async (data: Omit<InsertSatisfactionSurvey, \"userId\">) => {\n      return await apiRequest(\"/api/satisfaction-surveys\", \"POST\", data);\n    },\n    onSuccess: (response: any) => {\n      // GPT 검증 경고사항이 있으면 표시\n      if (response.validationWarnings && response.validationWarnings.length > 0) {\n        setValidationWarnings(response.validationWarnings);\n        toast({\n          title: \"제출 완료 (검증 알림 있음)\",\n          description: \"데이터가 저장되었지만 일부 검증 알림이 있습니다. 아래 내용을 확인해주세요.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"만족도 조사 완료\",\n          description: \"소중한 의견을 주셔서 감사합니다! 더 나은 서비스 제공에 활용하겠습니다.\",\n        });\n        setLocation(\"/\");\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"제출 실패\",\n        description: error.message || \"만족도 조사 제출 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle>로그인이 필요합니다</CardTitle>\n            <CardDescription>만족도 조사를 진행하려면 먼저 로그인해주세요.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button \n              className=\"w-full\" \n              onClick={() => setLocation(\"/login\")}\n            >\n              로그인하기\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"w-full\" \n              onClick={() => setLocation(\"/\")}\n            >\n              홈으로 돌아가기\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const onSubmit = (data: Omit<InsertSatisfactionSurvey, \"userId\">) => {\n    surveyMutation.mutate(data);\n  };\n\n  const renderStarRating = (fieldName: keyof typeof form.control._defaultValues, label: string) => (\n    <FormField\n      control={form.control}\n      name={fieldName as any}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel className=\"text-lg font-medium\">{label}</FormLabel>\n          <FormControl>\n            <RadioGroup\n              onValueChange={(value) => field.onChange(parseInt(value))}\n              value={field.value?.toString()}\n              className=\"flex space-x-2\"\n            >\n              {[1, 2, 3, 4, 5].map((rating) => (\n                <div key={rating} className=\"flex items-center space-x-1\">\n                  <RadioGroupItem\n                    value={rating.toString()}\n                    id={`${fieldName}-${rating}`}\n                    className=\"sr-only\"\n                  />\n                  <label\n                    htmlFor={`${fieldName}-${rating}`}\n                    className=\"cursor-pointer hover:scale-110 transition-transform\"\n                  >\n                    <Star\n                      className={`h-8 w-8 ${\n                        field.value && field.value >= rating\n                          ? \"fill-yellow-400 text-yellow-400\"\n                          : \"text-gray-300 dark:text-gray-600\"\n                      }`}\n                    />\n                  </label>\n                </div>\n              ))}\n            </RadioGroup>\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n            <Heart className=\"inline mr-2 h-8 w-8 text-red-500\" />\n            만족도 조사\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            서비스 개선을 위해 소중한 의견을 들려주세요\n          </p>\n        </div>\n\n        {/* GPT Validation Warnings */}\n        <ValidationAlert \n          warnings={validationWarnings}\n          note=\"입력하신 데이터에 대한 GPT 검증 결과입니다.\"\n          type=\"warning\"\n        />\n\n        <Card className=\"bg-white dark:bg-gray-800\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MessageSquare className=\"mr-2 h-5 w-5\" />\n              서비스 평가\n            </CardTitle>\n            <CardDescription>\n              1점(매우 불만족)부터 5점(매우 만족)까지 평가해주세요\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n                {/* Overall Satisfaction */}\n                {renderStarRating(\"overallSatisfaction\", \"전체적인 만족도\")}\n\n                {/* Recommendation Accuracy */}\n                {renderStarRating(\"recommendationAccuracy\", \"추천 결과의 정확성\")}\n\n                {/* System Usability */}\n                {renderStarRating(\"systemUsability\", \"시스템 사용 편의성\")}\n\n                {/* Would Recommend */}\n                <FormField\n                  control={form.control}\n                  name=\"wouldRecommend\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-medium\">\n                        <ThumbsUp className=\"inline mr-2 h-5 w-5\" />\n                        다른 학생들에게 추천하시겠습니까?\n                      </FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={(value) => field.onChange(value === \"true\")}\n                          value={field.value?.toString()}\n                          className=\"flex space-x-6\"\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"true\" id=\"recommend-yes\" />\n                            <label htmlFor=\"recommend-yes\" className=\"text-green-600 dark:text-green-400 font-medium\">\n                              네, 추천하겠습니다\n                            </label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"false\" id=\"recommend-no\" />\n                            <label htmlFor=\"recommend-no\" className=\"text-red-600 dark:text-red-400 font-medium\">\n                              아니요, 추천하지 않겠습니다\n                            </label>\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Selected Major */}\n                <FormField\n                  control={form.control}\n                  name=\"selectedMajor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-medium\">\n                        실제로 선택하신 전공 (선택사항)\n                      </FormLabel>\n                      <FormControl>\n                        <input\n                          {...field}\n                          placeholder=\"예: 컴퓨터공학과\"\n                          className=\"w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Feedback */}\n                <FormField\n                  control={form.control}\n                  name=\"feedback\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-lg font-medium\">\n                        추가 의견 및 개선 사항 (선택사항)\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"서비스에 대한 의견이나 개선 사항을 자유롭게 작성해주세요...\"\n                          className=\"min-h-[120px] bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex space-x-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    onClick={() => setLocation(\"/\")}\n                  >\n                    나중에 하기\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1 bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600\"\n                    disabled={surveyMutation.isPending}\n                  >\n                    {surveyMutation.isPending ? (\n                      \"제출 중...\"\n                    ) : (\n                      <>\n                        <Heart className=\"mr-2 h-4 w-4\" />\n                        제출하기\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default function SatisfactionSurveyPage({ params }: SatisfactionSurveyPageProps) {\n  return (\n    <ProtectedRoute>\n      <SatisfactionSurveyContent params={params} />\n    </ProtectedRoute>\n  );\n}","size_bytes":11998},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <DialogTitle className=\"sr-only\">명령 검색</DialogTitle>\n        <DialogDescription className=\"sr-only\">명령을 검색하여 실행할 수 있습니다.</DialogDescription>\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":5104},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":7294},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }","size_bytes":1466},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}